import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ISchedule, IScheduleInterface } from "../../../contracts/schedule/ISchedule";
export declare class ISchedule__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "taskId";
            readonly type: "bytes";
        }];
        readonly name: "CanceledCall";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "taskId";
            readonly type: "bytes";
        }];
        readonly name: "RescheduledCall";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "contractAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "taskId";
            readonly type: "bytes";
        }];
        readonly name: "ScheduledCall";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "taskId";
            readonly type: "bytes";
        }];
        readonly name: "cancelCall";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "minDelay";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "taskId";
            readonly type: "bytes";
        }];
        readonly name: "rescheduleCall";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "contractAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "gasLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "storageLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "minDelay";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "inputData";
            readonly type: "bytes";
        }];
        readonly name: "scheduleCall";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IScheduleInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ISchedule;
}
