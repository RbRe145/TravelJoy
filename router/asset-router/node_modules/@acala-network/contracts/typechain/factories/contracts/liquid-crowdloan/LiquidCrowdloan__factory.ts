/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "@acala-network/contracts/typechain/common";
import type {
  LiquidCrowdloan,
  LiquidCrowdloanInterface,
} from "@acala-network/contracts/typechain/contracts/liquid-crowdloan/LiquidCrowdloan";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "redeemAmount",
        type: "uint256",
      },
    ],
    name: "Redeemed",
    type: "event",
  },
  {
    inputs: [],
    name: "getRedeemCurrency",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "redeem",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103f9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063785ad4c31461003b578063db006a751461006d575b600080fd5b61004361008e565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61008061007b366004610325565b610168565b604051908152602001610064565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f785ad4c30000000000000000000000000000000000000000000000000000000017905290516000918291829161040c916100fb919061033e565b600060405180830381855afa9150503d8060008114610136576040519150601f19603f3d011682016040523d82523d6000602084013e61013b565b606091505b5090925090508161014d573d60208201fd5b80806020019051810190610161919061036d565b9250505090565b6000816000036101d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4c697175696443726f77646c6f616e3a20616d6f756e74206973207a65726f00604482015260640160405180910390fd5b60405133602482015260448101839052600090819061040c90606401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1e9a69500000000000000000000000000000000000000000000000000000000017905251610275919061033e565b6000604051808303816000865af19150503d80600081146102b2576040519150601f19603f3d011682016040523d82523d6000602084013e6102b7565b606091505b509092509050816102c9573d60208201fd5b6000818060200190518101906102df91906103aa565b604080518781526020810183905291925033917ff3a670cd3af7d64b488926880889d08a8585a138ff455227af6737339a1ec262910160405180910390a2949350505050565b60006020828403121561033757600080fd5b5035919050565b6000825160005b8181101561035f5760208186018101518583015201610345565b506000920191825250919050565b60006020828403121561037f57600080fd5b815173ffffffffffffffffffffffffffffffffffffffff811681146103a357600080fd5b9392505050565b6000602082840312156103bc57600080fd5b505191905056fea2646970667358221220636c37478c7ef95cc2ac370e5faf1678853c55aac8381b7f6775de734075e8eb64736f6c63430008120033";

type LiquidCrowdloanConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidCrowdloanConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidCrowdloan__factory extends ContractFactory {
  constructor(...args: LiquidCrowdloanConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LiquidCrowdloan> {
    return super.deploy(overrides || {}) as Promise<LiquidCrowdloan>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LiquidCrowdloan {
    return super.attach(address) as LiquidCrowdloan;
  }
  override connect(signer: Signer): LiquidCrowdloan__factory {
    return super.connect(signer) as LiquidCrowdloan__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidCrowdloanInterface {
    return new utils.Interface(_abi) as LiquidCrowdloanInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidCrowdloan {
    return new Contract(address, _abi, signerOrProvider) as LiquidCrowdloan;
  }
}
