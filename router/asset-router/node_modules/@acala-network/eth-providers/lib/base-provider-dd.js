"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseProviderWithTrace = void 0;
const base_provider_1 = require("./base-provider");
const dd_trace_1 = __importDefault(require("dd-trace"));
const TRACE_METHODS = [
    '_onNewHead',
    '_onNewFinalizedHead',
    '_notifySubscribers',
    'queryStorage',
    'getNetwork',
    'getBlockNumber',
    'getBlockData',
    'getBlockDataForHeader',
    'getBalance',
    'getTransactionCount',
    'getEvmTransactionCount',
    'getSubstrateNonce',
    'getCode',
    'call',
    '_ethCall',
    'getStorageAt',
    'getGasPrice',
    'getFeeData',
    'estimateGas',
    '_estimateGasCost',
    'getEthResources',
    '_getEthGas',
    'estimateResources',
    'getSubstrateAddress',
    'getEvmAddress',
    'queryAccountInfo',
    'queryContractInfo',
    'prepareTransaction',
    'sendRawTransaction',
    'sendTransaction',
    '_wrapTransaction',
    '_getBlockNumber',
    '_getBlockHash',
    '_isBlockCanonical',
    '_isBlockFinalized',
    '_isTransactionFinalized',
    '_ensureSafeModeBlockTagFinalization',
    '_getBlockHeader',
    'getReceiptAtBlockFromChain',
    'getReceiptAtBlock',
    '_getReceiptAtBlockByHash',
    '_getReceiptAtBlockByIndex',
    '_getPendingTX',
    'getTransactionByHash',
    'getReceipt',
    '_getReceipt',
    '_sanitizeRawFilter',
    'getLogs',
    '_waitForSubql',
    'getIndexerMetadata',
    'healthCheck',
    'addEventListener',
    'removeEventListener',
    'addPollFilter',
    '_pollLogs',
    '_pollBlocks',
    'poll',
    'removePollFilter',
];
class BaseProviderWithTrace extends base_provider_1.BaseProvider {
    constructor(...args) {
        super(...args);
        for (const methodName of TRACE_METHODS) {
            if (typeof this[methodName] !== 'function' || methodName === 'constructor') {
                throw new Error(`cannot trace method ${methodName}`);
            }
            this[methodName] = dd_trace_1.default.wrap('provider_call', { resource: `provider.${methodName}` }, this[methodName].bind(this));
        }
    }
}
exports.BaseProviderWithTrace = BaseProviderWithTrace;
