"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaxSizeSet = void 0;
/* ----------
   a set with O(1) add and O(1) lookup
   which automatically preserve a maxsize
                               ---------- */
class MaxSizeSet {
    constructor(maxSize) {
        this.items = {};
        this.maxSize = maxSize;
        this.size = 0;
        this.head = null;
        this.tail = null;
    }
    add(blockHash) {
        const alreadyExist = this.items[blockHash] !== undefined;
        if (alreadyExist)
            return;
        if (this.size === this.maxSize) {
            // remove oldest blockHash
            const oldestblockHash = this.tail.blockHash;
            this.tail = this.tail.next;
            delete this.items[oldestblockHash];
            this.size--;
        }
        // add new blockHash
        const newNode = { blockHash, next: null };
        if (this.head === null) {
            this.head = newNode;
            this.tail = this.head;
        }
        else {
            this.head.next = newNode;
        }
        this.head = newNode;
        this.items[blockHash] = newNode;
        this.size++;
    }
    has(blockHash) {
        return this.items[blockHash] !== undefined;
    }
    toString() {
        const res = [];
        let cur = this.tail;
        while (cur && cur !== this.head?.next) {
            res.push(cur.blockHash);
            cur = cur.next;
        }
        return res;
    }
}
exports.MaxSizeSet = MaxSizeSet;
