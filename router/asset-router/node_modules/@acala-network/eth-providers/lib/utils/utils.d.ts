import { AnyFunction } from '@polkadot/types/types';
import { BigNumber, BigNumberish } from '@ethersproject/bignumber';
import { BlockTagish, CallInfo, Eip1898BlockTag } from '../base-provider';
import { CacheInspect } from './BlockCache';
import { Extrinsic } from '@polkadot/types/interfaces';
import { FrameSystemEventRecord } from '@polkadot/types/lookup';
import { _Metadata } from './gqlTypes';
import BN from 'bn.js';
export interface EthCallTimingResult {
    gasPriceTime: number;
    estimateGasTime: number;
    getBlockTime: number;
    getFullBlockTime: number;
}
export interface HealthResult {
    isHealthy: boolean;
    isSubqlOK: boolean;
    isCacheOK: boolean;
    isRPCOK: boolean;
    msg: string[];
    moreInfo: {
        cachedBlocksCount: number;
        maxCachedBlocksCount: number;
        lastProcessedHeight: number;
        targetHeight: number;
        curFinalizedHeight: number;
        lastProcessedTimestamp: number;
        curTimestamp: number;
        idleSeconds: number;
        idleBlocks: number;
        indexerHealthy: boolean;
        ethCallTiming: EthCallTimingResult;
        listenersCount: {
            newHead: number;
            newFinalizedHead: number;
            logs: number;
        };
    };
}
export interface HealthData {
    indexerMeta?: _Metadata;
    cacheInfo?: CacheInspect;
    curFinalizedHeight: number;
    ethCallTiming: EthCallTimingResult;
    listenersCount: {
        newHead: number;
        newFinalizedHead: number;
        logs: number;
    };
}
export declare const sleep: (interval?: number) => Promise<null>;
export declare const promiseWithTimeout: <T = any>(value: any, interval?: number) => Promise<T>;
export declare const runWithRetries: <F extends AnyFunction>(fn: F, args?: any[], maxRetries?: number, interval?: number) => Promise<F extends (...args: any[]) => infer R ? R : never>;
export declare const getHealthResult: ({ indexerMeta, cacheInfo, curFinalizedHeight, ethCallTiming, listenersCount, }: HealthData) => HealthResult;
export declare const runWithTiming: <F extends AnyFunction>(fn: F, repeats?: number) => Promise<{
    time: number;
    res: F extends (...args: any[]) => Promise<infer R> ? R : any;
}>;
export declare const nativeToEthDecimal: (value: any) => BigNumber;
export declare const ethToNativeDecimal: (value: any) => BigNumber;
export declare const parseBlockTag: (_blockTag: BlockTagish | Eip1898BlockTag) => Promise<string | number | undefined>;
export declare const decodeRevertMsg: (hexMsg: string) => string;
export declare const checkEvmExecutionError: (data: CallInfo['ok']) => void;
export declare const isEvmExtrinsic: (e: Extrinsic) => boolean;
export declare const isEvmEvent: (e: FrameSystemEventRecord) => boolean;
export declare const isNormalEvmEvent: (event: FrameSystemEventRecord) => boolean;
export declare const isOrphanEvmEvent: (event: FrameSystemEventRecord) => boolean;
export declare const isTxFeeEvent: (event: FrameSystemEventRecord) => boolean;
export declare const isExtrinsicFailedEvent: (event: FrameSystemEventRecord) => boolean;
export declare const isExtrinsicSuccessEvent: (event: FrameSystemEventRecord) => boolean;
export declare const sortObjByKey: <T extends Record<string, any>>(key: string) => (a: T, b: T) => number;
export declare const toBN: (bigNumberis?: BigNumberish) => BN;
