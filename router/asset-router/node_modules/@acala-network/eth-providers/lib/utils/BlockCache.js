"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockCache = void 0;
class BlockCache {
    constructor(maxCachedBlocks = 200) {
        // automatically preserve a sliding window of ${maxCachedBlocks} blocks
        this.addReceipts = (blockHash, receipts) => {
            this.blockHashToReceipts[blockHash] = receipts;
            receipts.forEach((r) => {
                this.txHashToReceipt[r.transactionHash] = r;
            });
            this.cachedBlockHashes.push(blockHash);
            if (this.cachedBlockHashes.length > this.maxCachedBlocks) {
                const removingBlockHash = this.cachedBlockHashes.shift();
                const removingTxs = this.blockHashToReceipts[removingBlockHash];
                removingTxs?.forEach((tx) => {
                    delete this.txHashToReceipt[tx.transactionHash];
                });
                delete this.blockHashToReceipts[removingBlockHash];
            }
        };
        this.getReceiptByHash = (txHash) => this.txHashToReceipt[txHash] ?? null;
        this.getAllReceiptsAtBlock = (blockHash) => this.blockHashToReceipts[blockHash] ?? [];
        this.getReceiptAtBlock = (txHash, blockHash) => this.getAllReceiptsAtBlock(blockHash).find((r) => r.transactionHash === txHash) ?? null;
        this.inspect = () => ({
            maxCachedBlocks: this.maxCachedBlocks,
            cachedBlocksCount: Object.keys(this.blockHashToReceipts).length,
            txHashToReceipt: this.txHashToReceipt,
            blockHashToReceipts: this.blockHashToReceipts,
        });
        this.txHashToReceipt = {};
        this.blockHashToReceipts = {};
        this.cachedBlockHashes = [];
        this.maxCachedBlocks = maxCachedBlocks;
    }
}
exports.BlockCache = BlockCache;
