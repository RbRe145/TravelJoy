import { QuerySubaccountTradeNonceResponse } from '@injectivelabs/chain-api/injective/exchange/v1beta1/query_pb';
import BaseConsumer from '@injectivelabs/sdk-ts/src/client/BaseGrpcConsumer';
/**
 * @category Chain Grpc API
 */
export declare class ChainGrpcExchangeApi extends BaseConsumer {
    protected module: string;
    fetchModuleParams(): Promise<import("@injectivelabs/sdk-ts/src/client/chain/types").ExchangeModuleParams>;
    fetchModuleState(): Promise<import("@injectivelabs/chain-api/injective/exchange/v1beta1/genesis_pb").GenesisState.AsObject>;
    fetchFeeDiscountSchedule(): Promise<import("@injectivelabs/sdk-ts/src/client/chain/types").FeeDiscountSchedule>;
    fetchFeeDiscountAccountInfo(injectiveAddress: string): Promise<import("@injectivelabs/sdk-ts/src/client/chain/types").FeeDiscountAccountInfo>;
    fetchTradingRewardsCampaign(): Promise<import("@injectivelabs/sdk-ts/src/client/chain/types").TradeRewardCampaign>;
    fetchTradeRewardPoints(injectiveAddresses: string[]): Promise<string[]>;
    fetchPendingTradeRewardPoints(injectiveAddresses: string[], timestamp?: number): Promise<string[]>;
    fetchPositions(): Promise<import("@injectivelabs/sdk-ts/src/client/chain/types").ChainDerivativePosition[]>;
    fetchSubaccountTradeNonce(subaccountId: string): Promise<QuerySubaccountTradeNonceResponse.AsObject>;
}
//# sourceMappingURL=ChainGrpcExchangeApi.d.ts.map