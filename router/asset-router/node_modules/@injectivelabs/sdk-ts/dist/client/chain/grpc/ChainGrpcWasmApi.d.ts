import { QuerySmartContractStateResponse, QueryRawContractStateResponse } from '@injectivelabs/chain-api/cosmwasm/wasm/v1/query_pb';
import BaseConsumer from '@injectivelabs/sdk-ts/src/client/BaseGrpcConsumer';
import { PaginationOption } from '@injectivelabs/sdk-ts/src/types/pagination';
/**
 * @category Chain Grpc API
 */
export declare class ChainGrpcWasmApi extends BaseConsumer {
    protected module: string;
    fetchContractAccountsBalance({ contractAddress, pagination, }: {
        contractAddress: string;
        pagination?: PaginationOption;
    }): Promise<import("@injectivelabs/sdk-ts/src/client/chain/types").ContractAccountsBalanceWithPagination>;
    fetchContractInfo(contractAddress: string): Promise<import("@injectivelabs/sdk-ts/src/client/chain/types").ContractInfo | undefined>;
    fetchContractHistory(contractAddress: string): Promise<{
        entriesList: import("@injectivelabs/sdk-ts/src/client/chain/types").ContractCodeHistoryEntry[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchSmartContractState(contractAddress: string, query?: string): Promise<QuerySmartContractStateResponse.AsObject>;
    fetchRawContractState(contractAddress: string, query?: string): Promise<QueryRawContractStateResponse.AsObject>;
    fetchContractCodes(pagination?: PaginationOption): Promise<{
        codeInfosList: import("@injectivelabs/sdk-ts/src/client/chain/types").CodeInfoResponse[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchContractCode(codeId: number): Promise<{
        codeInfo: import("@injectivelabs/sdk-ts/src/client/chain/types").CodeInfoResponse;
        data: string | Uint8Array;
    }>;
    fetchContractCodeContracts(codeId: number, pagination?: PaginationOption): Promise<{
        contractsList: string[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
}
//# sourceMappingURL=ChainGrpcWasmApi.d.ts.map