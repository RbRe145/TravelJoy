import { ProposalStatusMap } from '@injectivelabs/chain-api/cosmos/gov/v1beta1/gov_pb';
import BaseConsumer from '@injectivelabs/sdk-ts/src/client/BaseGrpcConsumer';
import { PaginationOption } from '@injectivelabs/sdk-ts/src/types/pagination';
/**
 * @category Chain Grpc API
 */
export declare class ChainGrpcGovApi extends BaseConsumer {
    protected module: string;
    fetchModuleParams(): Promise<import("@injectivelabs/sdk-ts/src/client/chain/types").GovModuleStateParams>;
    fetchProposals({ status, pagination, }: {
        status: ProposalStatusMap[keyof ProposalStatusMap];
        pagination?: PaginationOption;
    }): Promise<{
        proposals: import("@injectivelabs/sdk-ts/src/client/chain/types").Proposal[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchProposal(proposalId: number): Promise<import("@injectivelabs/sdk-ts/src/client/chain/types").Proposal>;
    fetchProposalDeposits({ proposalId, pagination, }: {
        proposalId: number;
        pagination?: PaginationOption;
    }): Promise<{
        deposits: import("@injectivelabs/sdk-ts/src/client/chain/types").ProposalDeposit[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchProposalVotes({ proposalId, pagination, }: {
        proposalId: number;
        pagination?: PaginationOption;
    }): Promise<{
        votes: import("@injectivelabs/sdk-ts/src/client/chain/types").Vote[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchProposalTally(proposalId: number): Promise<import("@injectivelabs/sdk-ts/src/client/chain/types").TallyResult>;
}
//# sourceMappingURL=ChainGrpcGovApi.d.ts.map