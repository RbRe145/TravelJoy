import BaseConsumer from '@injectivelabs/sdk-ts/src/client/BaseGrpcConsumer';
import { PaginationOption } from '@injectivelabs/sdk-ts/src/types/pagination';
/**
 * @category Chain Grpc API
 */
export declare class ChainGrpcStakingApi extends BaseConsumer {
    protected module: string;
    fetchModuleParams(): Promise<import("@injectivelabs/sdk-ts/src/client/chain/types").StakingModuleParams>;
    fetchPool(): Promise<import("@injectivelabs/sdk-ts/src/client/chain/types").Pool>;
    fetchValidators(pagination?: PaginationOption): Promise<{
        validators: import("@injectivelabs/sdk-ts/src/client/chain/types").Validator[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchValidator(address: string): Promise<import("@injectivelabs/sdk-ts/src/client/chain/types").Validator>;
    fetchValidatorDelegations({ validatorAddress, pagination, }: {
        validatorAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        delegations: import("@injectivelabs/sdk-ts/src/client/chain/types").Delegation[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchValidatorDelegationsNoThrow({ validatorAddress, pagination, }: {
        validatorAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        delegations: import("@injectivelabs/sdk-ts/src/client/chain/types").Delegation[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchValidatorUnbondingDelegations({ validatorAddress, pagination, }: {
        validatorAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        unbondingDelegations: import("@injectivelabs/sdk-ts/src/client/chain/types").UnBondingDelegation[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchValidatorUnbondingDelegationsNoThrow({ validatorAddress, pagination, }: {
        validatorAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        unbondingDelegations: import("@injectivelabs/sdk-ts/src/client/chain/types").UnBondingDelegation[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchDelegation({ injectiveAddress, validatorAddress, }: {
        injectiveAddress: string;
        validatorAddress: string;
    }): Promise<import("@injectivelabs/sdk-ts/src/client/chain/types").Delegation>;
    fetchDelegations({ injectiveAddress, pagination, }: {
        injectiveAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        delegations: import("@injectivelabs/sdk-ts/src/client/chain/types").Delegation[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchDelegationsNoThrow({ injectiveAddress, pagination, }: {
        injectiveAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        delegations: import("@injectivelabs/sdk-ts/src/client/chain/types").Delegation[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchDelegators({ validatorAddress, pagination, }: {
        validatorAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        delegations: import("@injectivelabs/sdk-ts/src/client/chain/types").Delegation[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchDelegatorsNoThrow({ validatorAddress, pagination, }: {
        validatorAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        delegations: import("@injectivelabs/sdk-ts/src/client/chain/types").Delegation[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchUnbondingDelegations({ injectiveAddress, pagination, }: {
        injectiveAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        unbondingDelegations: import("@injectivelabs/sdk-ts/src/client/chain/types").UnBondingDelegation[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchUnbondingDelegationsNoThrow({ injectiveAddress, pagination, }: {
        injectiveAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        unbondingDelegations: import("@injectivelabs/sdk-ts/src/client/chain/types").UnBondingDelegation[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchReDelegations({ injectiveAddress, pagination, }: {
        injectiveAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        redelegations: import("@injectivelabs/sdk-ts/src/client/chain/types").ReDelegation[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
    fetchReDelegationsNoThrow({ injectiveAddress, pagination, }: {
        injectiveAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        redelegations: import("@injectivelabs/sdk-ts/src/client/chain/types").ReDelegation[];
        pagination: import("@injectivelabs/sdk-ts/src/types/pagination").Pagination;
    }>;
}
//# sourceMappingURL=ChainGrpcStakingApi.d.ts.map