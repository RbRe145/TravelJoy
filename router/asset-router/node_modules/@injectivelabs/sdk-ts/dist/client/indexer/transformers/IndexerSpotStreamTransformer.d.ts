import { StreamTradesResponse, StreamOrdersResponse, StreamOrderbookResponse, StreamOrderbookV2Response, StreamOrdersHistoryResponse, StreamOrderbookUpdateResponse } from '@injectivelabs/indexer-api/injective_spot_exchange_rpc_pb';
import { StreamOperation } from '@injectivelabs/sdk-ts/src/types';
/**
 * @category Indexer Stream Transformer
 */
export declare class IndexerSpotStreamTransformer {
    static orderbookStreamCallback: (response: StreamOrderbookResponse) => {
        orderbook: import("@injectivelabs/sdk-ts/src/client/indexer").Orderbook | undefined;
        operation: StreamOperation;
        marketId: string;
        timestamp: number;
    };
    static tradesStreamCallback: (response: StreamTradesResponse) => {
        trade: import("@injectivelabs/sdk-ts/src/client/indexer").SpotTrade | undefined;
        operation: StreamOperation;
        timestamp: number;
    };
    static ordersStreamCallback: (response: StreamOrdersResponse) => {
        order: import("@injectivelabs/sdk-ts/src/client/indexer").SpotLimitOrder | undefined;
        operation: StreamOperation;
        timestamp: number;
    };
    static orderHistoryStreamCallback: (response: StreamOrdersHistoryResponse) => {
        order: import("@injectivelabs/sdk-ts/src/client/indexer").SpotOrderHistory | undefined;
        operation: StreamOperation;
        timestamp: number;
    };
    static orderbookV2StreamCallback: (response: StreamOrderbookV2Response) => {
        orderbook: import("@injectivelabs/sdk-ts/src/client/indexer").OrderbookWithSequence | undefined;
        operation: StreamOperation;
        marketId: string;
        timestamp: number;
    };
    static orderbookUpdateStreamCallback: (response: StreamOrderbookUpdateResponse) => {
        orderbook: import("@injectivelabs/sdk-ts/src/client/indexer").OrderbookWithSequence | undefined;
        operation: StreamOperation;
        marketId: string;
        timestamp: number;
    };
}
//# sourceMappingURL=IndexerSpotStreamTransformer.d.ts.map