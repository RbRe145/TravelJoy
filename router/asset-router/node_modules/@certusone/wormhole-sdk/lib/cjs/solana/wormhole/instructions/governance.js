"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUpgradeContractAccounts = exports.createUpgradeContractInstruction = exports.getUpgradeGuardianSetAccounts = exports.createUpgradeGuardianSetInstruction = exports.getTransferFeesAccounts = exports.createTransferFeesInstruction = exports.getSetFeesAccounts = exports.createSetFeesInstruction = void 0;
var web3_js_1 = require("@solana/web3.js");
var vaa_1 = require("../../../vaa");
var program_1 = require("../program");
var accounts_1 = require("../accounts");
var utils_1 = require("../../utils");
function createSetFeesInstruction(wormholeProgramId, payer, vaa) {
    var methods = program_1.createReadOnlyWormholeProgramInterface(wormholeProgramId).methods.setFees();
    // @ts-ignore
    return methods._ixFn.apply(methods, __spreadArray(__spreadArray([], __read(methods._args)), [{
            accounts: getSetFeesAccounts(wormholeProgramId, payer, vaa),
            signers: undefined,
            remainingAccounts: undefined,
            preInstructions: undefined,
            postInstructions: undefined,
        }]));
}
exports.createSetFeesInstruction = createSetFeesInstruction;
function getSetFeesAccounts(wormholeProgramId, payer, vaa) {
    var parsed = vaa_1.isBytes(vaa) ? vaa_1.parseGovernanceVaa(vaa) : vaa;
    return {
        payer: new web3_js_1.PublicKey(payer),
        bridge: accounts_1.deriveWormholeBridgeDataKey(wormholeProgramId),
        vaa: accounts_1.derivePostedVaaKey(wormholeProgramId, parsed.hash),
        claim: accounts_1.deriveClaimKey(wormholeProgramId, parsed.emitterAddress, parsed.emitterChain, parsed.sequence),
        systemProgram: web3_js_1.SystemProgram.programId,
    };
}
exports.getSetFeesAccounts = getSetFeesAccounts;
function createTransferFeesInstruction(wormholeProgramId, payer, recipient, vaa) {
    var methods = program_1.createReadOnlyWormholeProgramInterface(wormholeProgramId).methods.transferFees();
    // @ts-ignore
    return methods._ixFn.apply(methods, __spreadArray(__spreadArray([], __read(methods._args)), [{
            accounts: getTransferFeesAccounts(wormholeProgramId, payer, recipient, vaa),
            signers: undefined,
            remainingAccounts: undefined,
            preInstructions: undefined,
            postInstructions: undefined,
        }]));
}
exports.createTransferFeesInstruction = createTransferFeesInstruction;
function getTransferFeesAccounts(wormholeProgramId, payer, recipient, vaa) {
    var parsed = vaa_1.isBytes(vaa) ? vaa_1.parseGovernanceVaa(vaa) : vaa;
    return {
        payer: new web3_js_1.PublicKey(payer),
        bridge: accounts_1.deriveWormholeBridgeDataKey(wormholeProgramId),
        vaa: accounts_1.derivePostedVaaKey(wormholeProgramId, parsed.hash),
        claim: accounts_1.deriveClaimKey(wormholeProgramId, parsed.emitterAddress, parsed.emitterChain, parsed.sequence),
        feeCollector: accounts_1.deriveFeeCollectorKey(wormholeProgramId),
        recipient: new web3_js_1.PublicKey(recipient),
        rent: web3_js_1.SYSVAR_RENT_PUBKEY,
        systemProgram: web3_js_1.SystemProgram.programId,
    };
}
exports.getTransferFeesAccounts = getTransferFeesAccounts;
function createUpgradeGuardianSetInstruction(wormholeProgramId, payer, vaa) {
    var methods = program_1.createReadOnlyWormholeProgramInterface(wormholeProgramId).methods.upgradeGuardianSet();
    // @ts-ignore
    return methods._ixFn.apply(methods, __spreadArray(__spreadArray([], __read(methods._args)), [{
            accounts: getUpgradeGuardianSetAccounts(wormholeProgramId, payer, vaa),
            signers: undefined,
            remainingAccounts: undefined,
            preInstructions: undefined,
            postInstructions: undefined,
        }]));
}
exports.createUpgradeGuardianSetInstruction = createUpgradeGuardianSetInstruction;
function getUpgradeGuardianSetAccounts(wormholeProgramId, payer, vaa) {
    var parsed = vaa_1.isBytes(vaa) ? vaa_1.parseGovernanceVaa(vaa) : vaa;
    return {
        payer: new web3_js_1.PublicKey(payer),
        bridge: accounts_1.deriveWormholeBridgeDataKey(wormholeProgramId),
        vaa: accounts_1.derivePostedVaaKey(wormholeProgramId, parsed.hash),
        claim: accounts_1.deriveClaimKey(wormholeProgramId, parsed.emitterAddress, parsed.emitterChain, parsed.sequence),
        guardianSetOld: accounts_1.deriveGuardianSetKey(wormholeProgramId, parsed.guardianSetIndex),
        guardianSetNew: accounts_1.deriveGuardianSetKey(wormholeProgramId, parsed.guardianSetIndex + 1),
        systemProgram: web3_js_1.SystemProgram.programId,
    };
}
exports.getUpgradeGuardianSetAccounts = getUpgradeGuardianSetAccounts;
function createUpgradeContractInstruction(wormholeProgramId, payer, vaa) {
    var methods = program_1.createReadOnlyWormholeProgramInterface(wormholeProgramId).methods.upgradeContract();
    // @ts-ignore
    return methods._ixFn.apply(methods, __spreadArray(__spreadArray([], __read(methods._args)), [{
            accounts: getUpgradeContractAccounts(wormholeProgramId, payer, vaa),
            signers: undefined,
            remainingAccounts: undefined,
            preInstructions: undefined,
            postInstructions: undefined,
        }]));
}
exports.createUpgradeContractInstruction = createUpgradeContractInstruction;
function getUpgradeContractAccounts(wormholeProgramId, payer, vaa, spill) {
    var parsed = vaa_1.isBytes(vaa) ? vaa_1.parseGovernanceVaa(vaa) : vaa;
    var implementation = parsed.orderPayload;
    if (implementation.length != 32) {
        throw new Error("implementation.length != 32");
    }
    return {
        payer: new web3_js_1.PublicKey(payer),
        bridge: accounts_1.deriveWormholeBridgeDataKey(wormholeProgramId),
        vaa: accounts_1.derivePostedVaaKey(wormholeProgramId, parsed.hash),
        claim: accounts_1.deriveClaimKey(wormholeProgramId, parsed.emitterAddress, parsed.emitterChain, parsed.sequence),
        upgradeAuthority: accounts_1.deriveUpgradeAuthorityKey(wormholeProgramId),
        spill: new web3_js_1.PublicKey(spill === undefined ? payer : spill),
        implementation: new web3_js_1.PublicKey(implementation),
        programData: utils_1.deriveUpgradeableProgramKey(wormholeProgramId),
        wormholeProgram: new web3_js_1.PublicKey(wormholeProgramId),
        rent: web3_js_1.SYSVAR_RENT_PUBKEY,
        clock: web3_js_1.SYSVAR_CLOCK_PUBKEY,
        bpfLoaderUpgradeable: utils_1.BpfLoaderUpgradeable.programId,
        systemProgram: web3_js_1.SystemProgram.programId,
    };
}
exports.getUpgradeContractAccounts = getUpgradeContractAccounts;
