"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAttestTokenAccounts = exports.createAttestTokenInstruction = void 0;
var web3_js_1 = require("@solana/web3.js");
var program_1 = require("../program");
var wormhole_1 = require("../../wormhole");
var accounts_1 = require("../accounts");
function createAttestTokenInstruction(tokenBridgeProgramId, wormholeProgramId, payer, mint, message, nonce) {
    var methods = program_1.createReadOnlyTokenBridgeProgramInterface(tokenBridgeProgramId).methods.attestToken(nonce);
    // @ts-ignore
    return methods._ixFn.apply(methods, __spreadArray(__spreadArray([], __read(methods._args)), [{
            accounts: getAttestTokenAccounts(tokenBridgeProgramId, wormholeProgramId, payer, mint, message),
            signers: undefined,
            remainingAccounts: undefined,
            preInstructions: undefined,
            postInstructions: undefined,
        }]));
}
exports.createAttestTokenInstruction = createAttestTokenInstruction;
function getAttestTokenAccounts(tokenBridgeProgramId, wormholeProgramId, payer, mint, message) {
    var _a = wormhole_1.getPostMessageAccounts(wormholeProgramId, payer, tokenBridgeProgramId, message), wormholeBridge = _a.bridge, wormholeEmitter = _a.emitter, wormholeSequence = _a.sequence, wormholeFeeCollector = _a.feeCollector, clock = _a.clock, rent = _a.rent, systemProgram = _a.systemProgram;
    return {
        payer: new web3_js_1.PublicKey(payer),
        config: accounts_1.deriveTokenBridgeConfigKey(tokenBridgeProgramId),
        mint: new web3_js_1.PublicKey(mint),
        wrappedMeta: accounts_1.deriveWrappedMetaKey(tokenBridgeProgramId, mint),
        splMetadata: accounts_1.deriveSplTokenMetadataKey(mint),
        wormholeBridge: wormholeBridge,
        wormholeMessage: new web3_js_1.PublicKey(message),
        wormholeEmitter: wormholeEmitter,
        wormholeSequence: wormholeSequence,
        wormholeFeeCollector: wormholeFeeCollector,
        clock: clock,
        rent: rent,
        systemProgram: systemProgram,
        wormholeProgram: new web3_js_1.PublicKey(wormholeProgramId),
    };
}
exports.getAttestTokenAccounts = getAttestTokenAccounts;
