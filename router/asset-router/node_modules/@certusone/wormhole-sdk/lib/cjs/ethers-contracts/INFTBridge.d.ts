/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "@certusone/wormhole-sdk/lib/cjs/ethers-contracts/commons";

interface INFTBridgeInterface extends ethers.utils.Interface {
  functions: {
    "transferNFT(address,uint256,uint16,bytes32,uint32)": FunctionFragment;
    "completeTransfer(bytes)": FunctionFragment;
    "encodeTransfer(tuple)": FunctionFragment;
    "parseTransfer(bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "governanceActionIsConsumed(bytes32)": FunctionFragment;
    "isInitialized(address)": FunctionFragment;
    "isTransferCompleted(bytes32)": FunctionFragment;
    "wormhole()": FunctionFragment;
    "chainId()": FunctionFragment;
    "evmChainId()": FunctionFragment;
    "isFork()": FunctionFragment;
    "governanceChainId()": FunctionFragment;
    "governanceContract()": FunctionFragment;
    "wrappedAsset(uint16,bytes32)": FunctionFragment;
    "bridgeContracts(uint16)": FunctionFragment;
    "tokenImplementation()": FunctionFragment;
    "isWrappedAsset(address)": FunctionFragment;
    "splCache(uint256)": FunctionFragment;
    "finality()": FunctionFragment;
    "initialize()": FunctionFragment;
    "implementation()": FunctionFragment;
    "registerChain(bytes)": FunctionFragment;
    "upgrade(bytes)": FunctionFragment;
    "submitRecoverChainId(bytes)": FunctionFragment;
    "parseRegisterChain(bytes)": FunctionFragment;
    "parseUpgrade(bytes)": FunctionFragment;
    "parseRecoverChainId(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "transferNFT",
    values: [string, BigNumberish, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTransfer",
    values: [
      {
        tokenAddress: BytesLike;
        tokenChain: BigNumberish;
        symbol: BytesLike;
        name: BytesLike;
        tokenID: BigNumberish;
        uri: string;
        to: BytesLike;
        toChain: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "parseTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceActionIsConsumed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferCompleted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "evmChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isFork", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governanceChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedAsset",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWrappedAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "splCache",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "finality", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerChain",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "submitRecoverChainId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseRegisterChain",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseUpgrade",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseRecoverChainId",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "transferNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceActionIsConsumed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "evmChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWrappedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "splCache", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finality", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitRecoverChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseRegisterChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseRecoverChainId",
    data: BytesLike
  ): Result;

  events: {
    "ContractUpgraded(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
}

export class INFTBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: INFTBridgeInterface;

  functions: {
    transferNFT(
      token: string,
      tokenID: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeTransfer(
      encodeVm: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    encodeTransfer(
      transfer: {
        tokenAddress: BytesLike;
        tokenChain: BigNumberish;
        symbol: BytesLike;
        name: BytesLike;
        tokenID: BigNumberish;
        uri: string;
        to: BytesLike;
        toChain: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string] & { encoded: string }>;

    parseTransfer(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, string, string, BigNumber, string, string, number] & {
          tokenAddress: string;
          tokenChain: number;
          symbol: string;
          name: string;
          tokenID: BigNumber;
          uri: string;
          to: string;
          toChain: number;
        }
      ] & {
        transfer: [
          string,
          number,
          string,
          string,
          BigNumber,
          string,
          string,
          number
        ] & {
          tokenAddress: string;
          tokenChain: number;
          symbol: string;
          name: string;
          tokenID: BigNumber;
          uri: string;
          to: string;
          toChain: number;
        };
      }
    >;

    onERC721Received(
      operator: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInitialized(impl: string, overrides?: CallOverrides): Promise<[boolean]>;

    isTransferCompleted(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    wormhole(overrides?: CallOverrides): Promise<[string]>;

    chainId(overrides?: CallOverrides): Promise<[number]>;

    evmChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    isFork(overrides?: CallOverrides): Promise<[boolean]>;

    governanceChainId(overrides?: CallOverrides): Promise<[number]>;

    governanceContract(overrides?: CallOverrides): Promise<[string]>;

    wrappedAsset(
      tokenChainId: BigNumberish,
      tokenAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bridgeContracts(
      chainId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenImplementation(overrides?: CallOverrides): Promise<[string]>;

    isWrappedAsset(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    splCache(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, string] & { name: string; symbol: string }]>;

    finality(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    registerChain(
      encodedVM: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgrade(
      encodedVM: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitRecoverChainId(
      encodedVM: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    parseRegisterChain(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, number, number, string] & {
          module: string;
          action: number;
          chainId: number;
          emitterChainID: number;
          emitterAddress: string;
        }
      ] & {
        chain: [string, number, number, number, string] & {
          module: string;
          action: number;
          chainId: number;
          emitterChainID: number;
          emitterAddress: string;
        };
      }
    >;

    parseUpgrade(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, number, string] & {
          module: string;
          action: number;
          chainId: number;
          newContract: string;
        }
      ] & {
        chain: [string, number, number, string] & {
          module: string;
          action: number;
          chainId: number;
          newContract: string;
        };
      }
    >;

    parseRecoverChainId(
      encodedRecoverChainId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, BigNumber, number] & {
          module: string;
          action: number;
          evmChainId: BigNumber;
          newChainId: number;
        }
      ] & {
        rci: [string, number, BigNumber, number] & {
          module: string;
          action: number;
          evmChainId: BigNumber;
          newChainId: number;
        };
      }
    >;
  };

  transferNFT(
    token: string,
    tokenID: BigNumberish,
    recipientChain: BigNumberish,
    recipient: BytesLike,
    nonce: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeTransfer(
    encodeVm: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  encodeTransfer(
    transfer: {
      tokenAddress: BytesLike;
      tokenChain: BigNumberish;
      symbol: BytesLike;
      name: BytesLike;
      tokenID: BigNumberish;
      uri: string;
      to: BytesLike;
      toChain: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  parseTransfer(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string, string, BigNumber, string, string, number] & {
      tokenAddress: string;
      tokenChain: number;
      symbol: string;
      name: string;
      tokenID: BigNumber;
      uri: string;
      to: string;
      toChain: number;
    }
  >;

  onERC721Received(
    operator: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  governanceActionIsConsumed(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInitialized(impl: string, overrides?: CallOverrides): Promise<boolean>;

  isTransferCompleted(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  wormhole(overrides?: CallOverrides): Promise<string>;

  chainId(overrides?: CallOverrides): Promise<number>;

  evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

  isFork(overrides?: CallOverrides): Promise<boolean>;

  governanceChainId(overrides?: CallOverrides): Promise<number>;

  governanceContract(overrides?: CallOverrides): Promise<string>;

  wrappedAsset(
    tokenChainId: BigNumberish,
    tokenAddress: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  bridgeContracts(
    chainId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenImplementation(overrides?: CallOverrides): Promise<string>;

  isWrappedAsset(token: string, overrides?: CallOverrides): Promise<boolean>;

  splCache(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { name: string; symbol: string }>;

  finality(overrides?: CallOverrides): Promise<number>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  implementation(overrides?: CallOverrides): Promise<string>;

  registerChain(
    encodedVM: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgrade(
    encodedVM: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitRecoverChainId(
    encodedVM: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  parseRegisterChain(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, number, string] & {
      module: string;
      action: number;
      chainId: number;
      emitterChainID: number;
      emitterAddress: string;
    }
  >;

  parseUpgrade(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, string] & {
      module: string;
      action: number;
      chainId: number;
      newContract: string;
    }
  >;

  parseRecoverChainId(
    encodedRecoverChainId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, number] & {
      module: string;
      action: number;
      evmChainId: BigNumber;
      newChainId: number;
    }
  >;

  callStatic: {
    transferNFT(
      token: string,
      tokenID: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeTransfer(
      encodeVm: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    encodeTransfer(
      transfer: {
        tokenAddress: BytesLike;
        tokenChain: BigNumberish;
        symbol: BytesLike;
        name: BytesLike;
        tokenID: BigNumberish;
        uri: string;
        to: BytesLike;
        toChain: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    parseTransfer(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, string, BigNumber, string, string, number] & {
        tokenAddress: string;
        tokenChain: number;
        symbol: string;
        name: string;
        tokenID: BigNumber;
        uri: string;
        to: string;
        toChain: number;
      }
    >;

    onERC721Received(
      operator: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitialized(impl: string, overrides?: CallOverrides): Promise<boolean>;

    isTransferCompleted(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wormhole(overrides?: CallOverrides): Promise<string>;

    chainId(overrides?: CallOverrides): Promise<number>;

    evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    isFork(overrides?: CallOverrides): Promise<boolean>;

    governanceChainId(overrides?: CallOverrides): Promise<number>;

    governanceContract(overrides?: CallOverrides): Promise<string>;

    wrappedAsset(
      tokenChainId: BigNumberish,
      tokenAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    bridgeContracts(
      chainId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenImplementation(overrides?: CallOverrides): Promise<string>;

    isWrappedAsset(token: string, overrides?: CallOverrides): Promise<boolean>;

    splCache(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { name: string; symbol: string }>;

    finality(overrides?: CallOverrides): Promise<number>;

    initialize(overrides?: CallOverrides): Promise<void>;

    implementation(overrides?: CallOverrides): Promise<string>;

    registerChain(
      encodedVM: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    upgrade(encodedVM: BytesLike, overrides?: CallOverrides): Promise<void>;

    submitRecoverChainId(
      encodedVM: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    parseRegisterChain(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, number, string] & {
        module: string;
        action: number;
        chainId: number;
        emitterChainID: number;
        emitterAddress: string;
      }
    >;

    parseUpgrade(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, string] & {
        module: string;
        action: number;
        chainId: number;
        newContract: string;
      }
    >;

    parseRecoverChainId(
      encodedRecoverChainId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, number] & {
        module: string;
        action: number;
        evmChainId: BigNumber;
        newChainId: number;
      }
    >;
  };

  filters: {
    ContractUpgraded(
      oldContract?: string | null,
      newContract?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldContract: string; newContract: string }
    >;
  };

  estimateGas: {
    transferNFT(
      token: string,
      tokenID: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeTransfer(
      encodeVm: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    encodeTransfer(
      transfer: {
        tokenAddress: BytesLike;
        tokenChain: BigNumberish;
        symbol: BytesLike;
        name: BytesLike;
        tokenID: BigNumberish;
        uri: string;
        to: BytesLike;
        toChain: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseTransfer(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(impl: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTransferCompleted(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wormhole(overrides?: CallOverrides): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    isFork(overrides?: CallOverrides): Promise<BigNumber>;

    governanceChainId(overrides?: CallOverrides): Promise<BigNumber>;

    governanceContract(overrides?: CallOverrides): Promise<BigNumber>;

    wrappedAsset(
      tokenChainId: BigNumberish,
      tokenAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bridgeContracts(
      chainId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    isWrappedAsset(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    splCache(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finality(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    registerChain(
      encodedVM: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgrade(
      encodedVM: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitRecoverChainId(
      encodedVM: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    parseRegisterChain(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseUpgrade(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseRecoverChainId(
      encodedRecoverChainId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    transferNFT(
      token: string,
      tokenID: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeTransfer(
      encodeVm: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    encodeTransfer(
      transfer: {
        tokenAddress: BytesLike;
        tokenChain: BigNumberish;
        symbol: BytesLike;
        name: BytesLike;
        tokenID: BigNumberish;
        uri: string;
        to: BytesLike;
        toChain: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseTransfer(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(
      impl: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTransferCompleted(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wormhole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    evmChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrappedAsset(
      tokenChainId: BigNumberish,
      tokenAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridgeContracts(
      chainId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWrappedAsset(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    splCache(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finality(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerChain(
      encodedVM: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(
      encodedVM: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitRecoverChainId(
      encodedVM: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    parseRegisterChain(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseUpgrade(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseRecoverChainId(
      encodedRecoverChainId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
