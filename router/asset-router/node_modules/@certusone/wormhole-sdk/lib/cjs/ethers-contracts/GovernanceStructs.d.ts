/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "@certusone/wormhole-sdk/lib/cjs/ethers-contracts/commons";

interface GovernanceStructsInterface extends ethers.utils.Interface {
  functions: {
    "parseContractUpgrade(bytes)": FunctionFragment;
    "parseGuardianSetUpgrade(bytes)": FunctionFragment;
    "parseSetMessageFee(bytes)": FunctionFragment;
    "parseTransferFees(bytes)": FunctionFragment;
    "parseRecoverChainId(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "parseContractUpgrade",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseGuardianSetUpgrade",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseSetMessageFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseTransferFees",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseRecoverChainId",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "parseContractUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseGuardianSetUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseSetMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseTransferFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseRecoverChainId",
    data: BytesLike
  ): Result;

  events: {};
}

export class GovernanceStructs extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GovernanceStructsInterface;

  functions: {
    /**
     * Parse a contract upgrade (action 1) with minimal validation
     */
    parseContractUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, number, string] & {
          module: string;
          action: number;
          chain: number;
          newContract: string;
        }
      ] & {
        cu: [string, number, number, string] & {
          module: string;
          action: number;
          chain: number;
          newContract: string;
        };
      }
    >;

    /**
     * Parse a guardianSet upgrade (action 2) with minimal validation
     */
    parseGuardianSetUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          number,
          [string[], number] & { keys: string[]; expirationTime: number },
          number
        ] & {
          module: string;
          action: number;
          chain: number;
          newGuardianSet: [string[], number] & {
            keys: string[];
            expirationTime: number;
          };
          newGuardianSetIndex: number;
        }
      ] & {
        gsu: [
          string,
          number,
          number,
          [string[], number] & { keys: string[]; expirationTime: number },
          number
        ] & {
          module: string;
          action: number;
          chain: number;
          newGuardianSet: [string[], number] & {
            keys: string[];
            expirationTime: number;
          };
          newGuardianSetIndex: number;
        };
      }
    >;

    /**
     * Parse a setMessageFee (action 3) with minimal validation
     */
    parseSetMessageFee(
      encodedSetMessageFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, number, BigNumber] & {
          module: string;
          action: number;
          chain: number;
          messageFee: BigNumber;
        }
      ] & {
        smf: [string, number, number, BigNumber] & {
          module: string;
          action: number;
          chain: number;
          messageFee: BigNumber;
        };
      }
    >;

    /**
     * Parse a transferFees (action 4) with minimal validation
     */
    parseTransferFees(
      encodedTransferFees: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, number, BigNumber, string] & {
          module: string;
          action: number;
          chain: number;
          amount: BigNumber;
          recipient: string;
        }
      ] & {
        tf: [string, number, number, BigNumber, string] & {
          module: string;
          action: number;
          chain: number;
          amount: BigNumber;
          recipient: string;
        };
      }
    >;

    /**
     * Parse a recoverChainId (action 5) with minimal validation
     */
    parseRecoverChainId(
      encodedRecoverChainId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, BigNumber, number] & {
          module: string;
          action: number;
          evmChainId: BigNumber;
          newChainId: number;
        }
      ] & {
        rci: [string, number, BigNumber, number] & {
          module: string;
          action: number;
          evmChainId: BigNumber;
          newChainId: number;
        };
      }
    >;
  };

  /**
   * Parse a contract upgrade (action 1) with minimal validation
   */
  parseContractUpgrade(
    encodedUpgrade: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, string] & {
      module: string;
      action: number;
      chain: number;
      newContract: string;
    }
  >;

  /**
   * Parse a guardianSet upgrade (action 2) with minimal validation
   */
  parseGuardianSetUpgrade(
    encodedUpgrade: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      number,
      [string[], number] & { keys: string[]; expirationTime: number },
      number
    ] & {
      module: string;
      action: number;
      chain: number;
      newGuardianSet: [string[], number] & {
        keys: string[];
        expirationTime: number;
      };
      newGuardianSetIndex: number;
    }
  >;

  /**
   * Parse a setMessageFee (action 3) with minimal validation
   */
  parseSetMessageFee(
    encodedSetMessageFee: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, BigNumber] & {
      module: string;
      action: number;
      chain: number;
      messageFee: BigNumber;
    }
  >;

  /**
   * Parse a transferFees (action 4) with minimal validation
   */
  parseTransferFees(
    encodedTransferFees: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, BigNumber, string] & {
      module: string;
      action: number;
      chain: number;
      amount: BigNumber;
      recipient: string;
    }
  >;

  /**
   * Parse a recoverChainId (action 5) with minimal validation
   */
  parseRecoverChainId(
    encodedRecoverChainId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, number] & {
      module: string;
      action: number;
      evmChainId: BigNumber;
      newChainId: number;
    }
  >;

  callStatic: {
    /**
     * Parse a contract upgrade (action 1) with minimal validation
     */
    parseContractUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, string] & {
        module: string;
        action: number;
        chain: number;
        newContract: string;
      }
    >;

    /**
     * Parse a guardianSet upgrade (action 2) with minimal validation
     */
    parseGuardianSetUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        number,
        [string[], number] & { keys: string[]; expirationTime: number },
        number
      ] & {
        module: string;
        action: number;
        chain: number;
        newGuardianSet: [string[], number] & {
          keys: string[];
          expirationTime: number;
        };
        newGuardianSetIndex: number;
      }
    >;

    /**
     * Parse a setMessageFee (action 3) with minimal validation
     */
    parseSetMessageFee(
      encodedSetMessageFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, BigNumber] & {
        module: string;
        action: number;
        chain: number;
        messageFee: BigNumber;
      }
    >;

    /**
     * Parse a transferFees (action 4) with minimal validation
     */
    parseTransferFees(
      encodedTransferFees: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, BigNumber, string] & {
        module: string;
        action: number;
        chain: number;
        amount: BigNumber;
        recipient: string;
      }
    >;

    /**
     * Parse a recoverChainId (action 5) with minimal validation
     */
    parseRecoverChainId(
      encodedRecoverChainId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, number] & {
        module: string;
        action: number;
        evmChainId: BigNumber;
        newChainId: number;
      }
    >;
  };

  filters: {};

  estimateGas: {
    /**
     * Parse a contract upgrade (action 1) with minimal validation
     */
    parseContractUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Parse a guardianSet upgrade (action 2) with minimal validation
     */
    parseGuardianSetUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Parse a setMessageFee (action 3) with minimal validation
     */
    parseSetMessageFee(
      encodedSetMessageFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Parse a transferFees (action 4) with minimal validation
     */
    parseTransferFees(
      encodedTransferFees: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Parse a recoverChainId (action 5) with minimal validation
     */
    parseRecoverChainId(
      encodedRecoverChainId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Parse a contract upgrade (action 1) with minimal validation
     */
    parseContractUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Parse a guardianSet upgrade (action 2) with minimal validation
     */
    parseGuardianSetUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Parse a setMessageFee (action 3) with minimal validation
     */
    parseSetMessageFee(
      encodedSetMessageFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Parse a transferFees (action 4) with minimal validation
     */
    parseTransferFees(
      encodedTransferFees: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Parse a recoverChainId (action 5) with minimal validation
     */
    parseRecoverChainId(
      encodedRecoverChainId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
