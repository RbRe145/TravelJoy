var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { ethers } from "ethers";
import { CONTRACTS } from "./consts";
import { Implementation__factory } from "../ethers-contracts";
import { parseVaa } from "../vaa";
import { hexToUint8Array } from "./array";
import { keccak256 } from "../utils";
var ETHEREUM_CORE_BRIDGE = CONTRACTS["MAINNET"].ethereum.core;
function hex(x) {
    return ethers.utils.hexlify(x, { allowMissingPrefix: true });
}
export function getCurrentGuardianSet(provider) {
    return __awaiter(this, void 0, void 0, function () {
        var result, core, index, guardianSet;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    result = {
                        index: 0,
                        keys: [],
                        expiry: 0,
                    };
                    core = Implementation__factory.connect(ETHEREUM_CORE_BRIDGE, provider);
                    return [4 /*yield*/, core.getCurrentGuardianSetIndex()];
                case 1:
                    index = _a.sent();
                    return [4 /*yield*/, core.getGuardianSet(index)];
                case 2:
                    guardianSet = _a.sent();
                    result.index = index;
                    result.keys = guardianSet[0];
                    result.expiry = guardianSet[1];
                    return [2 /*return*/, result];
            }
        });
    });
}
/**
 *
 * Takes in a hexstring representation of a signed vaa and a guardian set.
 * Attempts to remove invalid guardian signatures, update total remaining
 * valid signatures, and update the guardian set index
 * @throws if not enough valid signatures remain
 **/
export function repairVaa(vaaHex, guardianSetData) {
    var guardianSetIndex = guardianSetData.index;
    var currentGuardianSet = guardianSetData.keys;
    var minNumSignatures = Math.floor((2.0 * currentGuardianSet.length) / 3.0) + 1;
    var version = vaaHex.slice(0, 2);
    var parsedVaa = parseVaa(hexToUint8Array(vaaHex));
    var numSignatures = parsedVaa.guardianSignatures.length;
    var digest = keccak256(parsedVaa.hash).toString("hex");
    var validSignatures = [];
    // take each signature, check if valid against hash & current guardian set
    parsedVaa.guardianSignatures.forEach(function (signature) {
        try {
            var vaaGuardianPublicKey = ethers.utils.recoverAddress(hex(digest), hex(signature.signature.toString("hex")));
            var currentIndex = signature.index;
            var currentGuardianPublicKey = currentGuardianSet[currentIndex];
            if (currentGuardianPublicKey === vaaGuardianPublicKey) {
                validSignatures.push(signature);
            }
        }
        catch (_) { }
    });
    // re-construct vaa with signatures that remain
    var numRepairedSignatures = validSignatures.length;
    if (numRepairedSignatures < minNumSignatures) {
        throw new Error("There are not enough valid signatures to repair.");
    }
    var repairedSignatures = validSignatures
        .sort(function (a, b) {
        return a.index - b.index;
    })
        .map(function (signature) {
        return "" + signature.index
            .toString(16)
            .padStart(2, "0") + signature.signature.toString("hex");
    })
        .join("");
    var newSignatureBody = "" + version + guardianSetIndex
        .toString(16)
        .padStart(8, "0") + numRepairedSignatures
        .toString(16)
        .padStart(2, "0") + repairedSignatures;
    var repairedVaa = "" + newSignatureBody + vaaHex.slice(12 + numSignatures * 132);
    return repairedVaa;
}
/**
 *
 * Takes in a hexstring representation of a signed vaa and an eth provider.
 * Attempts to query eth core contract and retrieve current guardian set.
 * Then attempts to repair the vaa.
 **/
export function repairVaaWithCurrentGuardianSet(vaaHex, provider) {
    return __awaiter(this, void 0, void 0, function () {
        var guardianSetData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getCurrentGuardianSet(provider)];
                case 1:
                    guardianSetData = _a.sent();
                    return [2 /*return*/, repairVaa(vaaHex, guardianSetData)];
            }
        });
    });
}
