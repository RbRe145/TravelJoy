var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { BN } from "@project-serum/anchor";
import { ApiError, HexString, TokenClient, } from "aptos";
import { isBytes } from "ethers/lib/utils";
import { fromUint8Array } from "js-base64";
import { CHAIN_ID_SOLANA } from "..";
import { NFTBridge__factory } from "../ethers-contracts";
import { deriveWrappedMintKey } from "../solana/nftBridge";
import { CHAIN_ID_APTOS, coalesceChainId, deriveResourceAccountAddress, ensureHexPrefix, getTokenIdFromTokenHash, hexToUint8Array, } from "../utils";
/**
 * Returns a foreign asset address on Ethereum for a provided native chain and asset address, AddressZero if it does not exist
 * @param nftBridgeAddress
 * @param provider
 * @param originChain
 * @param originAsset zero pad to 32 bytes
 * @returns
 */
export function getForeignAssetEth(nftBridgeAddress, provider, originChain, originAsset) {
    return __awaiter(this, void 0, void 0, function () {
        var originChainId, tokenBridge, addr, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    originChainId = coalesceChainId(originChain);
                    tokenBridge = NFTBridge__factory.connect(nftBridgeAddress, provider);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 5, , 6]);
                    if (!(originChainId === CHAIN_ID_SOLANA)) return [3 /*break*/, 3];
                    return [4 /*yield*/, tokenBridge.wrappedAsset(originChain, "0x0101010101010101010101010101010101010101010101010101010101010101")];
                case 2:
                    addr = _a.sent();
                    return [2 /*return*/, addr];
                case 3: return [4 /*yield*/, tokenBridge.wrappedAsset(originChainId, originAsset)];
                case 4: return [2 /*return*/, _a.sent()];
                case 5:
                    e_1 = _a.sent();
                    return [2 /*return*/, null];
                case 6: return [2 /*return*/];
            }
        });
    });
}
/**
 * Returns a foreign asset address on Terra for a provided native chain and asset address
 * @param nftBridgeAddress
 * @param client
 * @param originChain
 * @param originAsset
 * @returns
 */
export function getForeignAssetTerra(nftBridgeAddress, client, originChain, originAsset) {
    return __awaiter(this, void 0, void 0, function () {
        var originChainId, address, result, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    originChainId = coalesceChainId(originChain);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    address = originChain == CHAIN_ID_SOLANA
                        ? "AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE="
                        : fromUint8Array(originAsset);
                    return [4 /*yield*/, client.wasm.contractQuery(nftBridgeAddress, {
                            wrapped_registry: {
                                chain: originChainId,
                                address: address,
                            },
                        })];
                case 2:
                    result = _a.sent();
                    return [2 /*return*/, result.address];
                case 3:
                    e_2 = _a.sent();
                    return [2 /*return*/, null];
                case 4: return [2 /*return*/];
            }
        });
    });
}
/**
 * Returns a foreign asset address on Solana for a provided native chain and asset address
 * @param nftBridgeAddress
 * @param originChain
 * @param originAsset zero pad to 32 bytes
 * @returns
 */
export function getForeignAssetSolana(nftBridgeAddress, originChain, originAsset, tokenId) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            // we don't require NFT accounts to exist, so don't check them.
            return [2 /*return*/, deriveWrappedMintKey(nftBridgeAddress, coalesceChainId(originChain), originAsset, isBytes(tokenId) ? BigInt(new BN(tokenId).toString()) : tokenId).toString()];
        });
    });
}
export var getForeignAssetSol = getForeignAssetSolana;
/**
 * Get the token id of a foreign asset on Aptos. Tokens on Aptos are identified
 * by the tuple (creatorAddress, collectionName, tokenName, propertyVersion),
 * which this method returns as an object.
 *
 * This method also supports native assets, in which case it expects the token
 * hash (which can be obtained from `deriveTokenHashFromTokenId`).
 * @param client
 * @param nftBridgeAddress
 * @param originChain
 * @param originAddress External address of token on origin chain, or token hash
 * if origin chain is Aptos
 * @param tokenId Token id of token on origin chain, unnecessary if origin
 * chain is Aptos
 * @returns Unique token identifier on Aptos
 */
export function getForeignAssetAptos(client, nftBridgeAddress, originChain, originAddress, tokenId) {
    return __awaiter(this, void 0, void 0, function () {
        var originChainId, creatorAddress, tokenIdAsUint8Array, PAGE_SIZE, events, event, tokenIdObj, e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    originChainId = coalesceChainId(originChain);
                    if (originChainId === CHAIN_ID_APTOS) {
                        return [2 /*return*/, getTokenIdFromTokenHash(client, nftBridgeAddress, originAddress)];
                    }
                    return [4 /*yield*/, deriveResourceAccountAddress(nftBridgeAddress, originChainId, originAddress)];
                case 1:
                    creatorAddress = _a.sent();
                    if (!creatorAddress) {
                        throw new Error("Could not derive creator account address");
                    }
                    if (typeof tokenId === "bigint") {
                        tokenId = hexToUint8Array(BigInt(tokenId).toString(16).padStart(64, "0"));
                    }
                    if (!tokenId) {
                        throw new Error("Invalid token ID");
                    }
                    tokenIdAsUint8Array = new Uint8Array(tokenId);
                    PAGE_SIZE = 25;
                    return [4 /*yield*/, client.getEventsByEventHandle(creatorAddress, "0x3::token::Collections", "create_token_data_events", { limit: PAGE_SIZE })];
                case 2:
                    events = (_a.sent());
                    event = events.find(function (e) {
                        return ensureHexPrefix(e.data.id.name) ===
                            HexString.fromUint8Array(tokenIdAsUint8Array).hex();
                    });
                    if (event) {
                        return [2 /*return*/, {
                                token_data_id: event.data.id,
                                property_version: "0", // property version always "0" for wrapped tokens
                            }];
                    }
                    _a.label = 3;
                case 3:
                    _a.trys.push([3, 5, , 6]);
                    tokenIdObj = {
                        token_data_id: __assign(__assign({}, events[0].data.id), { name: HexString.fromUint8Array(tokenIdAsUint8Array).noPrefix() }),
                        property_version: "0",
                    };
                    return [4 /*yield*/, new TokenClient(client).getTokenData(tokenIdObj.token_data_id.creator, tokenIdObj.token_data_id.collection, tokenIdObj.token_data_id.name)];
                case 4:
                    _a.sent();
                    return [2 /*return*/, tokenIdObj];
                case 5:
                    e_3 = _a.sent();
                    if (e_3 instanceof ApiError &&
                        e_3.status === 404 &&
                        e_3.errorCode === "table_item_not_found") {
                        return [2 /*return*/, null];
                    }
                    throw e_3;
                case 6: return [2 /*return*/];
            }
        });
    });
}
