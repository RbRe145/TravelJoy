var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import { PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, } from "@solana/web3.js";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { createReadOnlyNftBridgeProgramInterface } from "../program";
import { derivePostedVaaKey } from "../../wormhole";
import { deriveEndpointKey, deriveNftBridgeConfigKey, deriveWrappedMintKey, deriveWrappedMetaKey, deriveMintAuthorityKey, } from "../accounts";
import { isBytes, parseNftTransferVaa, } from "../../../vaa";
import { deriveSplTokenMetadataKey, SplTokenMetadataProgram, } from "../../utils";
export function createCompleteWrappedMetaInstruction(nftBridgeProgramId, wormholeProgramId, payer, vaa) {
    var methods = createReadOnlyNftBridgeProgramInterface(nftBridgeProgramId).methods.completeWrappedMeta();
    // @ts-ignore
    return methods._ixFn.apply(methods, __spreadArray(__spreadArray([], __read(methods._args)), [{
            accounts: getCompleteWrappedMetaAccounts(nftBridgeProgramId, wormholeProgramId, payer, vaa),
            signers: undefined,
            remainingAccounts: undefined,
            preInstructions: undefined,
            postInstructions: undefined,
        }]));
}
export function getCompleteWrappedMetaAccounts(nftBridgeProgramId, wormholeProgramId, payer, vaa) {
    var parsed = isBytes(vaa) ? parseNftTransferVaa(vaa) : vaa;
    var mint = deriveWrappedMintKey(nftBridgeProgramId, parsed.tokenChain, parsed.tokenAddress, parsed.tokenId);
    return {
        payer: new PublicKey(payer),
        config: deriveNftBridgeConfigKey(nftBridgeProgramId),
        vaa: derivePostedVaaKey(wormholeProgramId, parsed.hash),
        endpoint: deriveEndpointKey(nftBridgeProgramId, parsed.emitterChain, parsed.emitterAddress),
        mint: mint,
        wrappedMeta: deriveWrappedMetaKey(nftBridgeProgramId, mint),
        splMetadata: deriveSplTokenMetadataKey(mint),
        mintAuthority: deriveMintAuthorityKey(nftBridgeProgramId),
        rent: SYSVAR_RENT_PUBKEY,
        systemProgram: SystemProgram.programId,
        tokenProgram: TOKEN_PROGRAM_ID,
        splMetadataProgram: SplTokenMetadataProgram.programId,
        wormholeProgram: new PublicKey(wormholeProgramId),
    };
}
