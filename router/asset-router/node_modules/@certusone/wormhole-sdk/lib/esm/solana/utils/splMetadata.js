var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, } from "@solana/web3.js";
import { deriveAddress, getAccountData, newAccountMeta, newReadOnlyAccountMeta, } from "./account";
var Creator = /** @class */ (function () {
    function Creator(address, verified, share) {
        this.address = new PublicKey(address);
        this.verified = verified;
        this.share = share;
    }
    Creator.prototype.serialize = function () {
        var serialized = Buffer.alloc(Creator.size);
        serialized.write(this.address.toBuffer().toString("hex"), 0, "hex");
        if (this.verified) {
            serialized.writeUInt8(1, 32);
        }
        serialized.writeUInt8(this.share, 33);
        return serialized;
    };
    Creator.deserialize = function (data) {
        var address = data.subarray(0, 32);
        var verified = data.readUInt8(32) > 0;
        var share = data.readUInt8(33);
        return new Creator(address, verified, share);
    };
    Creator.size = 34;
    return Creator;
}());
export { Creator };
var Data = /** @class */ (function () {
    function Data(name, symbol, uri, sellerFeeBasisPoints, creators) {
        this.name = name;
        this.symbol = symbol;
        this.uri = uri;
        this.sellerFeeBasisPoints = sellerFeeBasisPoints;
        this.creators = creators;
    }
    Data.prototype.serialize = function () {
        var nameLen = this.name.length;
        var symbolLen = this.symbol.length;
        var uriLen = this.uri.length;
        var creators = this.creators;
        var _a = __read((function () {
            if (creators === null) {
                return [0, 0];
            }
            var creatorsLen = creators.length;
            return [creatorsLen, 4 + creatorsLen * Creator.size];
        })(), 2), creatorsLen = _a[0], creatorsSize = _a[1];
        var serialized = Buffer.alloc(15 + nameLen + symbolLen + uriLen + creatorsSize);
        serialized.writeUInt32LE(nameLen, 0);
        serialized.write(this.name, 4);
        serialized.writeUInt32LE(symbolLen, 4 + nameLen);
        serialized.write(this.symbol, 8 + nameLen);
        serialized.writeUInt32LE(uriLen, 8 + nameLen + symbolLen);
        serialized.write(this.uri, 12 + nameLen + symbolLen);
        serialized.writeUInt16LE(this.sellerFeeBasisPoints, 12 + nameLen + symbolLen + uriLen);
        if (creators === null) {
            serialized.writeUInt8(0, 14 + nameLen + symbolLen + uriLen);
        }
        else {
            serialized.writeUInt8(1, 14 + nameLen + symbolLen + uriLen);
            serialized.writeUInt32LE(creatorsLen, 15 + nameLen + symbolLen + uriLen);
            for (var i = 0; i < creatorsLen; ++i) {
                var creator = creators.at(i);
                var idx = 19 + nameLen + symbolLen + uriLen + i * Creator.size;
                serialized.write(creator.serialize().toString("hex"), idx, "hex");
            }
        }
        return serialized;
    };
    Data.deserialize = function (data) {
        var nameLen = data.readUInt32LE(0);
        var name = data.subarray(4, 4 + nameLen).toString();
        var symbolLen = data.readUInt32LE(4 + nameLen);
        var symbol = data
            .subarray(8 + nameLen, 8 + nameLen + symbolLen)
            .toString();
        var uriLen = data.readUInt32LE(8 + nameLen + symbolLen);
        var uri = data
            .subarray(12 + nameLen + symbolLen, 12 + nameLen + symbolLen + uriLen)
            .toString();
        var sellerFeeBasisPoints = data.readUInt16LE(12 + nameLen + symbolLen + uriLen);
        var optionCreators = data.readUInt8(14 + nameLen + symbolLen + uriLen);
        var creators = (function () {
            if (optionCreators == 0) {
                return null;
            }
            var creators = [];
            var creatorsLen = data.readUInt32LE(15 + nameLen + symbolLen + uriLen);
            for (var i = 0; i < creatorsLen; ++i) {
                var idx = 19 + nameLen + symbolLen + uriLen + i * Creator.size;
                creators.push(Creator.deserialize(data.subarray(idx, idx + Creator.size)));
            }
            return creators;
        })();
        return new Data(name, symbol, uri, sellerFeeBasisPoints, creators);
    };
    return Data;
}());
export { Data };
var CreateMetadataAccountArgs = /** @class */ (function (_super) {
    __extends(CreateMetadataAccountArgs, _super);
    function CreateMetadataAccountArgs(name, symbol, uri, sellerFeeBasisPoints, creators, isMutable) {
        var _this = _super.call(this, name, symbol, uri, sellerFeeBasisPoints, creators) || this;
        _this.isMutable = isMutable;
        return _this;
    }
    CreateMetadataAccountArgs.serialize = function (name, symbol, uri, sellerFeeBasisPoints, creators, isMutable) {
        return new CreateMetadataAccountArgs(name, symbol, uri, sellerFeeBasisPoints, creators, isMutable).serialize();
    };
    CreateMetadataAccountArgs.serializeInstructionData = function (name, symbol, uri, sellerFeeBasisPoints, creators, isMutable) {
        return Buffer.concat([
            Buffer.alloc(1, 0),
            CreateMetadataAccountArgs.serialize(name, symbol, uri, sellerFeeBasisPoints, creators, isMutable),
        ]);
    };
    CreateMetadataAccountArgs.prototype.serialize = function () {
        return Buffer.concat([
            _super.prototype.serialize.call(this),
            Buffer.alloc(1, this.isMutable ? 1 : 0),
        ]);
    };
    return CreateMetadataAccountArgs;
}(Data));
export { CreateMetadataAccountArgs };
var SplTokenMetadataProgram = /** @class */ (function () {
    /**
     * @internal
     */
    function SplTokenMetadataProgram() {
    }
    SplTokenMetadataProgram.createMetadataAccounts = function (payer, mint, mintAuthority, name, symbol, updateAuthority, updateAuthorityIsSigner, uri, creators, sellerFeeBasisPoints, isMutable, metadataAccount) {
        if (updateAuthorityIsSigner === void 0) { updateAuthorityIsSigner = false; }
        if (isMutable === void 0) { isMutable = false; }
        if (metadataAccount === void 0) { metadataAccount = deriveSplTokenMetadataKey(mint); }
        var keys = [
            newAccountMeta(metadataAccount, false),
            newReadOnlyAccountMeta(mint, false),
            newReadOnlyAccountMeta(mintAuthority, true),
            newReadOnlyAccountMeta(payer, true),
            newReadOnlyAccountMeta(updateAuthority, updateAuthorityIsSigner),
            newReadOnlyAccountMeta(SystemProgram.programId, false),
            newReadOnlyAccountMeta(SYSVAR_RENT_PUBKEY, false),
        ];
        var data = CreateMetadataAccountArgs.serializeInstructionData(name, symbol, uri === undefined ? "" : uri, sellerFeeBasisPoints === undefined ? 0 : sellerFeeBasisPoints, creators === undefined ? null : creators, isMutable);
        return {
            programId: SplTokenMetadataProgram.programId,
            keys: keys,
            data: data,
        };
    };
    /**
     * Public key that identifies the SPL Token Metadata program
     */
    SplTokenMetadataProgram.programId = new PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s");
    return SplTokenMetadataProgram;
}());
export { SplTokenMetadataProgram };
export function deriveSplTokenMetadataKey(mint) {
    return deriveAddress([
        Buffer.from("metadata"),
        SplTokenMetadataProgram.programId.toBuffer(),
        new PublicKey(mint).toBuffer(),
    ], SplTokenMetadataProgram.programId);
}
export var Key;
(function (Key) {
    Key[Key["Uninitialized"] = 0] = "Uninitialized";
    Key[Key["EditionV1"] = 1] = "EditionV1";
    Key[Key["MasterEditionV1"] = 2] = "MasterEditionV1";
    Key[Key["ReservationListV1"] = 3] = "ReservationListV1";
    Key[Key["MetadataV1"] = 4] = "MetadataV1";
    Key[Key["ReservationListV2"] = 5] = "ReservationListV2";
    Key[Key["MasterEditionV2"] = 6] = "MasterEditionV2";
    Key[Key["EditionMarker"] = 7] = "EditionMarker";
})(Key || (Key = {}));
var Metadata = /** @class */ (function () {
    function Metadata(key, updateAuthority, mint, data, primarySaleHappened, isMutable) {
        this.key = key;
        this.updateAuthority = new PublicKey(updateAuthority);
        this.mint = new PublicKey(mint);
        this.data = data;
        this.primarySaleHappened = primarySaleHappened;
        this.isMutable = isMutable;
    }
    Metadata.deserialize = function (data) {
        var key = data.readUInt8(0);
        var updateAuthority = data.subarray(1, 33);
        var mint = data.subarray(33, 65);
        var meta = Data.deserialize(data.subarray(65));
        var metaLen = meta.serialize().length;
        var primarySaleHappened = data.readUInt8(65 + metaLen) > 0;
        var isMutable = data.readUInt8(66 + metaLen) > 0;
        return new Metadata(key, updateAuthority, mint, meta, primarySaleHappened, isMutable);
    };
    return Metadata;
}());
export { Metadata };
export function getMetadata(connection, mint, commitment) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, connection
                    .getAccountInfo(deriveSplTokenMetadataKey(mint), commitment)
                    .then(function (info) { return Metadata.deserialize(getAccountData(info)); })];
        });
    });
}
