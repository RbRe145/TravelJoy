var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { TxnBuilderTypes } from "aptos";
import { _parseVAAAlgorand } from "../../algorand";
import { assertChain, CHAIN_ID_APTOS, coalesceChainId, getAssetFullyQualifiedType, getTypeFromExternalAddress, hexToUint8Array, isValidAptosType, } from "../../utils";
// Attest token
export var attestToken = function (tokenBridgeAddress, tokenChain, tokenAddress) {
    if (!tokenBridgeAddress)
        throw new Error("Need token bridge address.");
    var assetType = getAssetFullyQualifiedType(tokenBridgeAddress, coalesceChainId(tokenChain), tokenAddress);
    if (!assetType)
        throw new Error("Invalid asset address.");
    return {
        function: tokenBridgeAddress + "::attest_token::attest_token_entry",
        type_arguments: [assetType],
        arguments: [],
    };
};
// Complete transfer
export var completeTransfer = function (client, tokenBridgeAddress, transferVAA, feeRecipient) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedVAA, assetType, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (!tokenBridgeAddress)
                    throw new Error("Need token bridge address.");
                parsedVAA = _parseVAAAlgorand(transferVAA);
                if (!parsedVAA.FromChain || !parsedVAA.Contract || !parsedVAA.ToChain) {
                    throw new Error("VAA does not contain required information");
                }
                if (parsedVAA.ToChain !== CHAIN_ID_APTOS) {
                    throw new Error("Transfer is not destined for Aptos");
                }
                assertChain(parsedVAA.FromChain);
                if (!(parsedVAA.FromChain === CHAIN_ID_APTOS)) return [3 /*break*/, 2];
                return [4 /*yield*/, getTypeFromExternalAddress(client, tokenBridgeAddress, parsedVAA.Contract)];
            case 1:
                _a = _b.sent();
                return [3 /*break*/, 3];
            case 2:
                _a = getAssetFullyQualifiedType(tokenBridgeAddress, coalesceChainId(parsedVAA.FromChain), parsedVAA.Contract);
                _b.label = 3;
            case 3:
                assetType = _a;
                if (!assetType)
                    throw new Error("Invalid asset address.");
                return [2 /*return*/, {
                        function: tokenBridgeAddress + "::complete_transfer::submit_vaa_entry",
                        type_arguments: [assetType],
                        arguments: [transferVAA, feeRecipient],
                    }];
        }
    });
}); };
export var completeTransferAndRegister = function (client, tokenBridgeAddress, transferVAA) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedVAA, assetType, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (!tokenBridgeAddress)
                    throw new Error("Need token bridge address.");
                parsedVAA = _parseVAAAlgorand(transferVAA);
                if (!parsedVAA.FromChain || !parsedVAA.Contract || !parsedVAA.ToChain) {
                    throw new Error("VAA does not contain required information");
                }
                if (parsedVAA.ToChain !== CHAIN_ID_APTOS) {
                    throw new Error("Transfer is not destined for Aptos");
                }
                assertChain(parsedVAA.FromChain);
                if (!(parsedVAA.FromChain === CHAIN_ID_APTOS)) return [3 /*break*/, 2];
                return [4 /*yield*/, getTypeFromExternalAddress(client, tokenBridgeAddress, parsedVAA.Contract)];
            case 1:
                _a = _b.sent();
                return [3 /*break*/, 3];
            case 2:
                _a = getAssetFullyQualifiedType(tokenBridgeAddress, coalesceChainId(parsedVAA.FromChain), parsedVAA.Contract);
                _b.label = 3;
            case 3:
                assetType = _a;
                if (!assetType)
                    throw new Error("Invalid asset address.");
                return [2 /*return*/, {
                        function: tokenBridgeAddress + "::complete_transfer::submit_vaa_and_register_entry",
                        type_arguments: [assetType],
                        arguments: [transferVAA],
                    }];
        }
    });
}); };
export var completeTransferWithPayload = function (_tokenBridgeAddress, _tokenChain, _tokenAddress, _vaa) {
    throw new Error("Completing transfers with payload is not yet supported in the sdk");
};
/**
 * Construct a payload for a transaction that registers a coin defined by the given origin chain
 * ID and address to the sender's account.
 *
 * The bytecode was compiled from the following Move code:
 * ```move
 * script {
 *   use aptos_framework::coin;
 *   use aptos_framework::signer;
 *
 *   fun main<CoinType>(user: &signer) {
 *     if (!coin::is_account_registered<CoinType>(signer::address_of(user))) {
 *       coin::register<CoinType>(user);
 *     };
 *   }
 * }
 * ```
 * @param tokenBridgeAddress Address of token bridge
 * @param originChain Origin chain ID of asset
 * @param originAddress Asset address on origin chain
 * @returns Transaction payload
 */
export var registerCoin = function (tokenBridgeAddress, originChain, originAddress) {
    var bytecode = hexToUint8Array("a11ceb0b050000000601000403041104150405190b072436085a200000000101020002000003020401000004000101000103020301060c000105010900010104636f696e067369676e65720a616464726573735f6f661569735f6163636f756e745f726567697374657265640872656769737465720000000000000000000000000000000000000000000000000000000000000001010000010c0a001100380020030605090b003801050b0b000102");
    var assetType = getAssetFullyQualifiedType(tokenBridgeAddress, coalesceChainId(originChain), originAddress);
    if (!assetType)
        throw new Error("Asset type is null");
    var typeTag = new TxnBuilderTypes.TypeTagStruct(TxnBuilderTypes.StructTag.fromString(assetType));
    return new TxnBuilderTypes.TransactionPayloadScript(new TxnBuilderTypes.Script(bytecode, [typeTag], []));
};
// Deploy coin
// don't need `signer` and `&signer` in argument list because the Move VM will inject them
export var deployCoin = function (tokenBridgeAddress) {
    if (!tokenBridgeAddress)
        throw new Error("Need token bridge address.");
    return {
        function: tokenBridgeAddress + "::deploy_coin::deploy_coin",
        type_arguments: [],
        arguments: [],
    };
};
// Register chain
export var registerChain = function (tokenBridgeAddress, vaa) {
    if (!tokenBridgeAddress)
        throw new Error("Need token bridge address.");
    return {
        function: tokenBridgeAddress + "::register_chain::submit_vaa_entry",
        type_arguments: [],
        arguments: [vaa],
    };
};
// Transfer tokens
export var transferTokens = function (tokenBridgeAddress, fullyQualifiedType, amount, recipientChain, recipient, relayerFee, nonce) {
    if (!tokenBridgeAddress)
        throw new Error("Need token bridge address.");
    if (!isValidAptosType(fullyQualifiedType)) {
        throw new Error("Invalid qualified type");
    }
    var recipientChainId = coalesceChainId(recipientChain);
    return {
        function: tokenBridgeAddress + "::transfer_tokens::transfer_tokens_entry",
        type_arguments: [fullyQualifiedType],
        arguments: [amount, recipientChainId, recipient, relayerFee, nonce],
    };
};
export var transferTokensWithPayload = function (tokenBridgeAddress, fullyQualifiedType, amount, recipientChain, recipient, relayerFee, nonce, payload) {
    throw new Error("Transfer with payload are not yet supported in the sdk");
};
// Created wrapped coin
export var createWrappedCoinType = function (tokenBridgeAddress, vaa) {
    if (!tokenBridgeAddress)
        throw new Error("Need token bridge address.");
    return {
        function: tokenBridgeAddress + "::wrapped::create_wrapped_coin_type",
        type_arguments: [],
        arguments: [vaa],
    };
};
export var createWrappedCoin = function (tokenBridgeAddress, attestVAA) {
    if (!tokenBridgeAddress)
        throw new Error("Need token bridge address.");
    var parsedVAA = _parseVAAAlgorand(attestVAA);
    if (!parsedVAA.FromChain || !parsedVAA.Contract) {
        throw new Error("VAA does not contain required information");
    }
    assertChain(parsedVAA.FromChain);
    var assetType = getAssetFullyQualifiedType(tokenBridgeAddress, coalesceChainId(parsedVAA.FromChain), parsedVAA.Contract);
    if (!assetType)
        throw new Error("Invalid asset address.");
    return {
        function: tokenBridgeAddress + "::wrapped::create_wrapped_coin",
        type_arguments: [assetType],
        arguments: [attestVAA],
    };
};
