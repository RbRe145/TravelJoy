import { BigNumber } from '@ethersproject/bignumber';
import { Formatter, TransactionReceipt } from '@ethersproject/providers';
import { FrameSystemEventRecord } from '@polkadot/types/lookup';
import { TX } from '../base-provider';
import { TransactionReceipt as TransactionReceiptSubql } from './gqlTypes';
import type { EventRecord, SignedBlock } from '@polkadot/types/interfaces';
import type { EvmLog } from '@polkadot/types/interfaces/types';
import type { GenericExtrinsic } from '@polkadot/types';
export interface PartialLog {
    removed: boolean;
    address: string;
    data: string;
    topics: string[];
    logIndex: number;
}
export interface ExtrinsicMethodJSON {
    callIndex: string;
    args: {
        action?: {
            [key: string]: string;
        };
        init?: string;
        input?: string;
        target?: string;
        value: number;
        gas_limit: number;
        storage_limit: number;
        access_list: any[];
        valid_until?: number;
    };
}
export interface FullReceipt extends TransactionReceipt {
    exitReason?: string;
}
export declare const getPartialLog: (evmLog: EvmLog, logIndex: number) => PartialLog;
export declare const getPartialLogs: (evmLogs: EvmLog[]) => PartialLog[];
export interface PartialTransactionReceipt {
    to?: string;
    from: string;
    logs: PartialLog[];
    contractAddress?: string;
    root?: string;
    logsBloom: string;
    type: number;
    gasUsed: BigNumber;
    cumulativeGasUsed: BigNumber;
    status?: number;
    exitReason?: string;
}
export declare const getPartialTransactionReceipt: (event: FrameSystemEventRecord) => PartialTransactionReceipt;
export declare const findEvmEvent: (events: EventRecord[]) => EventRecord | undefined;
export declare const parseExtrinsic: (extrinsic: GenericExtrinsic) => {
    value: string;
    gas: number;
    input: string;
    to: string | null;
    nonce: number;
    v: string;
    r: string;
    s: string;
};
export declare const formatter: Formatter;
export declare const fullReceiptFormatter: {
    exitReason: (x: any) => any;
};
export declare const getOrphanTxReceiptsFromEvents: (events: FrameSystemEventRecord[], blockHash: string, blockNumber: number, indexOffset: number) => FullReceipt[];
export declare const subqlReceiptAdapter: <T extends TransactionReceiptSubql>(receipt: T) => T extends null ? null : FullReceipt;
export declare const receiptToTransaction: (tx: FullReceipt, block: SignedBlock) => TX;
