import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IXtokens, IXtokensInterface } from "../../../contracts/xtokens/IXtokens";
export declare class IXtokens__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "assets";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "fee";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "dest";
            readonly type: "bytes";
        }];
        readonly name: "TransferredMultiAssets";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "currencyId";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "dest";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "weight";
            readonly type: "bytes";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "asset";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "dest";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "weight";
            readonly type: "bytes";
        }];
        readonly name: "transferMultiAsset";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "asset";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "fee";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "dest";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "weight";
            readonly type: "bytes";
        }];
        readonly name: "transferMultiAssetWithFee";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "assets";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint32";
            readonly name: "feeItem";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "dest";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "weight";
            readonly type: "bytes";
        }];
        readonly name: "transferMultiAssets";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "currencyId";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IXtokens.Currency[]";
            readonly name: "currencies";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "uint32";
            readonly name: "feeItem";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "dest";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "weight";
            readonly type: "bytes";
        }];
        readonly name: "transferMultiCurrencies";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "currencyId";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "dest";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "weight";
            readonly type: "bytes";
        }];
        readonly name: "transferWithFee";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IXtokensInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IXtokens;
}
