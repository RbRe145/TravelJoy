var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { BN } from "@project-serum/anchor";
import { parseGovernanceVaa } from "./governance";
import { parseTokenBridgeRegisterChainGovernancePayload, parseTokenBridgeUpgradeContractGovernancePayload, } from "./tokenBridge";
import { parseVaa } from "./wormhole";
export var NftBridgePayload;
(function (NftBridgePayload) {
    NftBridgePayload[NftBridgePayload["Transfer"] = 1] = "Transfer";
})(NftBridgePayload || (NftBridgePayload = {}));
export var NftBridgeGovernanceAction;
(function (NftBridgeGovernanceAction) {
    NftBridgeGovernanceAction[NftBridgeGovernanceAction["RegisterChain"] = 1] = "RegisterChain";
    NftBridgeGovernanceAction[NftBridgeGovernanceAction["UpgradeContract"] = 2] = "UpgradeContract";
})(NftBridgeGovernanceAction || (NftBridgeGovernanceAction = {}));
export function parseNftTransferPayload(payload) {
    var payloadType = payload.readUInt8(0);
    if (payloadType != NftBridgePayload.Transfer) {
        throw new Error("not nft bridge transfer VAA");
    }
    var tokenAddress = payload.subarray(1, 33);
    var tokenChain = payload.readUInt16BE(33);
    var symbol = payload.subarray(35, 67).toString().replace(/\0/g, "");
    var name = payload.subarray(67, 99).toString().replace(/\0/g, "");
    var tokenId = BigInt(new BN(payload.subarray(99, 131)).toString());
    var uriLen = payload.readUInt8(131);
    var uri = payload.subarray(132, 132 + uriLen).toString();
    var uriEnd = 132 + uriLen;
    var to = payload.subarray(uriEnd, uriEnd + 32);
    var toChain = payload.readUInt16BE(uriEnd + 32);
    return {
        payloadType: payloadType,
        tokenAddress: tokenAddress,
        tokenChain: tokenChain,
        name: name,
        symbol: symbol,
        tokenId: tokenId,
        uri: uri,
        to: to,
        toChain: toChain,
    };
}
export function parseNftTransferVaa(vaa) {
    var parsed = parseVaa(vaa);
    return __assign(__assign({}, parsed), parseNftTransferPayload(parsed.payload));
}
export function parseNftBridgeRegisterChainGovernancePayload(payload) {
    return parseTokenBridgeRegisterChainGovernancePayload(payload);
}
export function parseNftBridgeRegisterChainVaa(vaa) {
    var parsed = parseGovernanceVaa(vaa);
    if (parsed.action != NftBridgeGovernanceAction.RegisterChain) {
        throw new Error("parsed.action != NftBridgeGovernanceAction.RegisterChain");
    }
    return __assign(__assign({}, parsed), parseNftBridgeRegisterChainGovernancePayload(parsed.orderPayload));
}
export function parseNftBridgeUpgradeContractGovernancePayload(payload) {
    return parseTokenBridgeUpgradeContractGovernancePayload(payload);
}
export function parseNftBridgeUpgradeContractVaa(vaa) {
    var parsed = parseGovernanceVaa(vaa);
    if (parsed.action != NftBridgeGovernanceAction.UpgradeContract) {
        throw new Error("parsed.action != NftBridgeGovernanceAction.UpgradeContract");
    }
    return __assign(__assign({}, parsed), parseNftBridgeUpgradeContractGovernancePayload(parsed.orderPayload));
}
