var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { Keypair, PublicKey, } from "@solana/web3.js";
/**
 *
 * @param payers
 * @returns
 */
export function signTransactionFactory() {
    var payers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        payers[_i] = arguments[_i];
    }
    return modifySignTransaction.apply(void 0, __spreadArray([function (transaction) { return Promise.resolve(transaction); }], __read(payers)));
}
export function modifySignTransaction(signTransaction) {
    var payers = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        payers[_i - 1] = arguments[_i];
    }
    return function (transaction) {
        var e_1, _a;
        try {
            for (var payers_1 = __values(payers), payers_1_1 = payers_1.next(); !payers_1_1.done; payers_1_1 = payers_1.next()) {
                var payer = payers_1_1.value;
                transaction.partialSign(payer);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (payers_1_1 && !payers_1_1.done && (_a = payers_1.return)) _a.call(payers_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return signTransaction(transaction);
    };
}
/**
 * Wrapper for {@link Keypair} resembling Solana web3 browser wallet
 */
var NodeWallet = /** @class */ (function () {
    function NodeWallet(payer) {
        this.payer = payer;
        this.signTransaction = signTransactionFactory(this.payer);
    }
    NodeWallet.fromSecretKey = function (secretKey, options) {
        return new NodeWallet(Keypair.fromSecretKey(secretKey, options));
    };
    NodeWallet.prototype.publicKey = function () {
        return this.payer.publicKey;
    };
    NodeWallet.prototype.pubkey = function () {
        return this.publicKey();
    };
    NodeWallet.prototype.key = function () {
        return this.publicKey();
    };
    NodeWallet.prototype.toString = function () {
        return this.publicKey().toString();
    };
    NodeWallet.prototype.keypair = function () {
        return this.payer;
    };
    NodeWallet.prototype.signer = function () {
        return this.keypair();
    };
    return NodeWallet;
}());
export { NodeWallet };
/**
 * The transactions provided to this function should be ready to send.
 * This function will do the following:
 * 1. Add the {@param payer} as the feePayer and latest blockhash to the {@link Transaction}.
 * 2. Sign using {@param signTransaction}.
 * 3. Send raw transaction.
 * 4. Confirm transaction.
 */
export function signSendAndConfirmTransaction(connection, payer, signTransaction, unsignedTransaction, options) {
    return __awaiter(this, void 0, void 0, function () {
        var commitment, _a, blockhash, lastValidBlockHeight, signed, signature, response;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    commitment = options === null || options === void 0 ? void 0 : options.commitment;
                    return [4 /*yield*/, connection.getLatestBlockhash(commitment)];
                case 1:
                    _a = _b.sent(), blockhash = _a.blockhash, lastValidBlockHeight = _a.lastValidBlockHeight;
                    unsignedTransaction.recentBlockhash = blockhash;
                    unsignedTransaction.feePayer = new PublicKey(payer);
                    return [4 /*yield*/, signTransaction(unsignedTransaction)];
                case 2:
                    signed = _b.sent();
                    return [4 /*yield*/, connection.sendRawTransaction(signed.serialize(), options)];
                case 3:
                    signature = _b.sent();
                    return [4 /*yield*/, connection.confirmTransaction({
                            blockhash: blockhash,
                            lastValidBlockHeight: lastValidBlockHeight,
                            signature: signature,
                        }, commitment)];
                case 4:
                    response = _b.sent();
                    return [2 /*return*/, { signature: signature, response: response }];
            }
        });
    });
}
/**
 * @deprecated Please use {@link signSendAndConfirmTransaction} instead, which allows
 * retries to be configured in {@link ConfirmOptions}.
 *
 * The transactions provided to this function should be ready to send.
 * This function will do the following:
 * 1. Add the {@param payer} as the feePayer and latest blockhash to the {@link Transaction}.
 * 2. Sign using {@param signTransaction}.
 * 3. Send raw transaction.
 * 4. Confirm transaction.
 */
export function sendAndConfirmTransactionsWithRetry(connection, signTransaction, payer, unsignedTransactions, maxRetries, options) {
    if (maxRetries === void 0) { maxRetries = 0; }
    return __awaiter(this, void 0, void 0, function () {
        var commitment, currentRetries, output, unsignedTransactions_1, unsignedTransactions_1_1, transaction, latest, signed, signature, response, e_2, e_3_1;
        var e_3, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (unsignedTransactions.length == 0) {
                        return [2 /*return*/, Promise.reject("No transactions provided to send.")];
                    }
                    commitment = options === null || options === void 0 ? void 0 : options.commitment;
                    currentRetries = 0;
                    output = [];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 14, 15, 16]);
                    unsignedTransactions_1 = __values(unsignedTransactions), unsignedTransactions_1_1 = unsignedTransactions_1.next();
                    _b.label = 2;
                case 2:
                    if (!!unsignedTransactions_1_1.done) return [3 /*break*/, 13];
                    transaction = unsignedTransactions_1_1.value;
                    _b.label = 3;
                case 3:
                    if (!(currentRetries <= maxRetries)) return [3 /*break*/, 11];
                    _b.label = 4;
                case 4:
                    _b.trys.push([4, 9, , 10]);
                    return [4 /*yield*/, connection.getLatestBlockhash(commitment)];
                case 5:
                    latest = _b.sent();
                    transaction.recentBlockhash = latest.blockhash;
                    transaction.feePayer = new PublicKey(payer);
                    return [4 /*yield*/, signTransaction(transaction).catch(function (e) { return null; })];
                case 6:
                    signed = _b.sent();
                    if (signed === null) {
                        return [2 /*return*/, Promise.reject("Failed to sign transaction.")];
                    }
                    return [4 /*yield*/, connection.sendRawTransaction(signed.serialize(), options)];
                case 7:
                    signature = _b.sent();
                    return [4 /*yield*/, connection.confirmTransaction(__assign({ signature: signature }, latest), commitment)];
                case 8:
                    response = _b.sent();
                    output.push({ signature: signature, response: response });
                    return [3 /*break*/, 11];
                case 9:
                    e_2 = _b.sent();
                    console.error(e_2);
                    ++currentRetries;
                    return [3 /*break*/, 10];
                case 10: return [3 /*break*/, 3];
                case 11:
                    if (currentRetries > maxRetries) {
                        return [2 /*return*/, Promise.reject("Reached the maximum number of retries.")];
                    }
                    _b.label = 12;
                case 12:
                    unsignedTransactions_1_1 = unsignedTransactions_1.next();
                    return [3 /*break*/, 2];
                case 13: return [3 /*break*/, 16];
                case 14:
                    e_3_1 = _b.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 16];
                case 15:
                    try {
                        if (unsignedTransactions_1_1 && !unsignedTransactions_1_1.done && (_a = unsignedTransactions_1.return)) _a.call(unsignedTransactions_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                    return [7 /*endfinally*/];
                case 16: return [2 /*return*/, Promise.resolve(output)];
            }
        });
    });
}
