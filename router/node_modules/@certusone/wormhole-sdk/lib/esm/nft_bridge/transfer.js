var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { BN } from "@project-serum/anchor";
import { Keypair, PublicKey, Transaction, } from "@solana/web3.js";
import { MsgExecuteContract } from "@terra-money/terra.js";
import { isBytes } from "ethers/lib/utils";
import { NFTBridge__factory, NFTImplementation__factory, } from "../ethers-contracts";
import { createBridgeFeeTransferInstruction } from "../solana";
import { createApproveAuthoritySignerInstruction, createTransferNativeInstruction, createTransferWrappedInstruction, } from "../solana/nftBridge";
import { CHAIN_ID_SOLANA, coalesceChainId, createNonce, } from "../utils";
export function transferFromEth(nftBridgeAddress, signer, tokenAddress, tokenID, recipientChain, recipientAddress, overrides) {
    if (overrides === void 0) { overrides = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var recipientChainId, token, bridge, v, receipt;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    recipientChainId = coalesceChainId(recipientChain);
                    token = NFTImplementation__factory.connect(tokenAddress, signer);
                    return [4 /*yield*/, token.approve(nftBridgeAddress, tokenID, overrides)];
                case 1: return [4 /*yield*/, (_a.sent()).wait()];
                case 2:
                    _a.sent();
                    bridge = NFTBridge__factory.connect(nftBridgeAddress, signer);
                    return [4 /*yield*/, bridge.transferNFT(tokenAddress, tokenID, recipientChainId, recipientAddress, createNonce(), overrides)];
                case 3:
                    v = _a.sent();
                    return [4 /*yield*/, v.wait()];
                case 4:
                    receipt = _a.sent();
                    return [2 /*return*/, receipt];
            }
        });
    });
}
export function transferFromSolana(connection, bridgeAddress, nftBridgeAddress, payerAddress, fromAddress, mintAddress, targetAddress, targetChain, originAddress, originChain, originTokenId, commitment) {
    return __awaiter(this, void 0, void 0, function () {
        var originChainId, nonce, transferIx, approvalIx, message, isSolanaNative, nftBridgeTransferIx, transaction, blockhash;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    originChainId = originChain
                        ? coalesceChainId(originChain)
                        : undefined;
                    nonce = createNonce().readUInt32LE(0);
                    return [4 /*yield*/, createBridgeFeeTransferInstruction(connection, bridgeAddress, payerAddress)];
                case 1:
                    transferIx = _a.sent();
                    approvalIx = createApproveAuthoritySignerInstruction(nftBridgeAddress, fromAddress, payerAddress);
                    message = Keypair.generate();
                    isSolanaNative = originChain === undefined || originChain === CHAIN_ID_SOLANA;
                    if (!isSolanaNative && (!originAddress || !originTokenId)) {
                        return [2 /*return*/, Promise.reject("originAddress and originTokenId are required when specifying originChain")];
                    }
                    nftBridgeTransferIx = isSolanaNative
                        ? createTransferNativeInstruction(nftBridgeAddress, bridgeAddress, payerAddress, message.publicKey, fromAddress, mintAddress, nonce, targetAddress, coalesceChainId(targetChain))
                        : createTransferWrappedInstruction(nftBridgeAddress, bridgeAddress, payerAddress, message.publicKey, fromAddress, payerAddress, originChainId, originAddress, isBytes(originTokenId)
                            ? BigInt(new BN(originTokenId).toString())
                            : originTokenId, nonce, targetAddress, coalesceChainId(targetChain));
                    transaction = new Transaction().add(transferIx, approvalIx, nftBridgeTransferIx);
                    return [4 /*yield*/, connection.getLatestBlockhash(commitment)];
                case 2:
                    blockhash = (_a.sent()).blockhash;
                    transaction.recentBlockhash = blockhash;
                    transaction.feePayer = new PublicKey(payerAddress);
                    transaction.partialSign(message);
                    return [2 /*return*/, transaction];
            }
        });
    });
}
export function transferFromTerra(walletAddress, nftBridgeAddress, tokenAddress, tokenID, recipientChain, recipientAddress) {
    return __awaiter(this, void 0, void 0, function () {
        var recipientChainId, nonce;
        return __generator(this, function (_a) {
            recipientChainId = coalesceChainId(recipientChain);
            nonce = Math.round(Math.random() * 100000);
            return [2 /*return*/, [
                    new MsgExecuteContract(walletAddress, tokenAddress, {
                        approve: {
                            spender: nftBridgeAddress,
                            token_id: tokenID,
                        },
                    }, {}),
                    new MsgExecuteContract(walletAddress, nftBridgeAddress, {
                        initiate_transfer: {
                            contract_addr: tokenAddress,
                            token_id: tokenID,
                            recipient_chain: recipientChainId,
                            recipient: Buffer.from(recipientAddress).toString("base64"),
                            nonce: nonce,
                        },
                    }, {}),
                ]];
        });
    });
}
export function transferFromAptos(nftBridgeAddress, creatorAddress, collectionName, tokenName, propertyVersion, recipientChain, recipient) {
    var recipientChainId = coalesceChainId(recipientChain);
    return {
        function: nftBridgeAddress + "::transfer_nft::transfer_nft_entry",
        type_arguments: [],
        arguments: [
            creatorAddress,
            collectionName,
            tokenName,
            propertyVersion,
            recipientChainId,
            recipient,
            createNonce().readUInt32LE(0),
        ],
    };
}
