var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { keccak256 } from "../utils";
import { ethPrivateToPublic, ethSignWithPrivate } from "./misc";
var SIGNATURE_PAYLOAD_LEN = 66;
var MockGuardians = /** @class */ (function () {
    function MockGuardians(setIndex, keys) {
        this.setIndex = setIndex;
        this.signers = keys.map(function (key, index) {
            return { index: index, key: key };
        });
    }
    MockGuardians.prototype.getPublicKeys = function () {
        return this.signers.map(function (guardian) { return ethPrivateToPublic(guardian.key); });
    };
    MockGuardians.prototype.updateGuardianSetIndex = function (setIndex) {
        this.setIndex = setIndex;
    };
    MockGuardians.prototype.addSignatures = function (message, guardianIndices) {
        if (guardianIndices.length == 0) {
            throw Error("guardianIndices.length == 0");
        }
        var signers = this.signers.filter(function (signer) {
            return guardianIndices.includes(signer.index);
        });
        var sigStart = 6;
        var numSigners = signers.length;
        var signedVaa = Buffer.alloc(sigStart + SIGNATURE_PAYLOAD_LEN * numSigners + message.length);
        signedVaa.write(message.toString("hex"), sigStart + SIGNATURE_PAYLOAD_LEN * numSigners, "hex");
        signedVaa.writeUInt8(1, 0);
        signedVaa.writeUInt32BE(this.setIndex, 1);
        signedVaa.writeUInt8(numSigners, 5);
        // signatures
        var hash = keccak256(keccak256(message));
        for (var i = 0; i < numSigners; ++i) {
            var signer = signers.at(i);
            if (signer == undefined) {
                throw Error("signer == undefined");
            }
            var signature = ethSignWithPrivate(signer.key, hash);
            var start = sigStart + i * SIGNATURE_PAYLOAD_LEN;
            signedVaa.writeUInt8(signer.index, start);
            signedVaa.write(signature.r.toString(16).padStart(64, "0"), start + 1, "hex");
            signedVaa.write(signature.s.toString(16).padStart(64, "0"), start + 33, "hex");
            signedVaa.writeUInt8(signature.recoveryParam, start + 65);
        }
        return signedVaa;
    };
    return MockGuardians;
}());
export { MockGuardians };
var MockEmitter = /** @class */ (function () {
    function MockEmitter(emitterAddress, chain, startSequence) {
        this.chain = chain;
        var address = Buffer.from(emitterAddress, "hex");
        if (address.length != 32) {
            throw Error("emitterAddress.length != 32");
        }
        this.address = address;
        this.sequence = startSequence == undefined ? 0 : startSequence;
    }
    MockEmitter.prototype.publishMessage = function (nonce, payload, consistencyLevel, timestamp, uptickSequence) {
        if (uptickSequence === void 0) { uptickSequence = true; }
        if (uptickSequence) {
            ++this.sequence;
        }
        var message = Buffer.alloc(51 + payload.length);
        message.writeUInt32BE(timestamp == undefined ? 0 : timestamp, 0);
        message.writeUInt32BE(nonce, 4);
        message.writeUInt16BE(this.chain, 8);
        message.write(this.address.toString("hex"), 10, "hex");
        message.writeBigUInt64BE(BigInt(this.sequence), 42);
        message.writeUInt8(consistencyLevel, 50);
        message.write(payload.toString("hex"), 51, "hex");
        return message;
    };
    return MockEmitter;
}());
export { MockEmitter };
var MockEthereumEmitter = /** @class */ (function (_super) {
    __extends(MockEthereumEmitter, _super);
    function MockEthereumEmitter(emitterAddress, chain) {
        return _super.call(this, emitterAddress, chain == undefined ? 2 : chain) || this;
    }
    return MockEthereumEmitter;
}(MockEmitter));
export { MockEthereumEmitter };
