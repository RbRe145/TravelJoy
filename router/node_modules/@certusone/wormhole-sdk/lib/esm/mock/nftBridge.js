var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { BN } from "@project-serum/anchor";
import { PublicKey } from "@solana/web3.js";
import { tryNativeToHexString } from "../utils";
import { MockEmitter } from "./wormhole";
var MockNftBridge = /** @class */ (function (_super) {
    __extends(MockNftBridge, _super);
    function MockNftBridge(emitterAddress, chain, consistencyLevel) {
        var _this = _super.call(this, emitterAddress, chain) || this;
        _this.consistencyLevel = consistencyLevel;
        return _this;
    }
    MockNftBridge.prototype.publishNftBridgeMessage = function (serialized, nonce, timestamp, uptickSequence) {
        if (uptickSequence === void 0) { uptickSequence = true; }
        return this.publishMessage(nonce == undefined ? 0 : nonce, serialized, this.consistencyLevel, timestamp, uptickSequence);
    };
    MockNftBridge.prototype.publishTransferNft = function (tokenAddress, tokenChain, name, symbol, tokenId, uri, recipientChain, recipient, nonce, timestamp, uptickSequence) {
        if (uptickSequence === void 0) { uptickSequence = true; }
        if (uri.length > 200) {
            throw new Error("uri.length > 200");
        }
        var serialized = Buffer.alloc(166 + uri.length);
        serialized.writeUInt8(1, 0);
        serialized.write(tokenAddress, 1, "hex");
        serialized.writeUInt16BE(tokenChain, 33);
        // truncate to 32 characters
        symbol = symbol.substring(0, 32);
        serialized.write(symbol, 35);
        // truncate to 32 characters
        name = name.substring(0, 32);
        serialized.write(name, 67);
        var tokenIdBytes = new BN(tokenId.toString()).toBuffer();
        serialized.write(tokenIdBytes.toString("hex"), 131 - tokenIdBytes.length, "hex");
        serialized.writeUInt8(uri.length, 131);
        serialized.write(uri, 132);
        var uriEnd = 132 + uri.length;
        serialized.write(recipient, uriEnd, "hex");
        serialized.writeUInt16BE(recipientChain, uriEnd + 32);
        return this.publishNftBridgeMessage(serialized, nonce, timestamp, uptickSequence);
    };
    return MockNftBridge;
}(MockEmitter));
export { MockNftBridge };
var MockEthereumNftBridge = /** @class */ (function (_super) {
    __extends(MockEthereumNftBridge, _super);
    function MockEthereumNftBridge(emitterAddress) {
        var _this = this;
        var chain = 2;
        _this = _super.call(this, tryNativeToHexString(emitterAddress, chain), chain, 15) || this;
        return _this;
    }
    return MockEthereumNftBridge;
}(MockNftBridge));
export { MockEthereumNftBridge };
var MockSolanaNftBridge = /** @class */ (function (_super) {
    __extends(MockSolanaNftBridge, _super);
    function MockSolanaNftBridge(emitterAddress) {
        return _super.call(this, new PublicKey(emitterAddress).toBuffer().toString("hex"), 1, 32) || this;
    }
    return MockSolanaNftBridge;
}(MockNftBridge));
export { MockSolanaNftBridge };
