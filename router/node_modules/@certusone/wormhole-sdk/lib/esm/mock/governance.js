var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { BN } from "@project-serum/anchor";
import { tryNativeToHexString } from "../utils";
import { MockEmitter } from "./wormhole";
var ETHEREUM_KEY_LENGTH = 20;
var GovernanceEmitter = /** @class */ (function (_super) {
    __extends(GovernanceEmitter, _super);
    function GovernanceEmitter(emitterAddress, startSequence) {
        return _super.call(this, emitterAddress, 1, startSequence) || this;
    }
    GovernanceEmitter.prototype.publishGovernanceMessage = function (timestamp, module, payload, action, chain, uptickSequence) {
        if (uptickSequence === void 0) { uptickSequence = true; }
        var serialized = Buffer.alloc(35 + payload.length);
        var moduleBytes = Buffer.alloc(32);
        moduleBytes.write(module, 32 - module.length);
        serialized.write(moduleBytes.toString("hex"), 0, "hex");
        serialized.writeUInt8(action, 32); // action
        serialized.writeUInt16BE(chain, 33);
        serialized.write(payload.toString("hex"), 35, "hex");
        return this.publishMessage(0, serialized, 1, timestamp, uptickSequence);
    };
    GovernanceEmitter.prototype.publishWormholeSetMessageFee = function (timestamp, chain, amount, uptickSequence) {
        if (uptickSequence === void 0) { uptickSequence = true; }
        var payload = Buffer.alloc(32);
        var amountBytes = new BN(amount.toString()).toBuffer();
        payload.write(amountBytes.toString("hex"), 32 - amountBytes.length, "hex");
        return this.publishGovernanceMessage(timestamp, "Core", payload, 3, chain, uptickSequence);
    };
    GovernanceEmitter.prototype.publishWormholeTransferFees = function (timestamp, chain, amount, recipient, uptickSequence) {
        if (uptickSequence === void 0) { uptickSequence = true; }
        var payload = Buffer.alloc(64);
        var amountBytes = new BN(amount.toString()).toBuffer();
        payload.write(amountBytes.toString("hex"), 32 - amountBytes.length, "hex");
        payload.write(recipient.toString("hex"), 32, "hex");
        return this.publishGovernanceMessage(timestamp, "Core", payload, 4, chain, uptickSequence);
    };
    GovernanceEmitter.prototype.publishWormholeGuardianSetUpgrade = function (timestamp, newGuardianSetIndex, publicKeys, uptickSequence) {
        if (uptickSequence === void 0) { uptickSequence = true; }
        var numKeys = publicKeys.length;
        var payload = Buffer.alloc(5 + ETHEREUM_KEY_LENGTH * numKeys);
        payload.writeUInt32BE(newGuardianSetIndex, 0);
        payload.writeUInt8(numKeys, 4);
        for (var i = 0; i < numKeys; ++i) {
            var publicKey = publicKeys.at(i);
            if (publicKey == undefined) {
                throw Error("publicKey == undefined");
            }
            payload.write(publicKey.toString("hex"), 5 + ETHEREUM_KEY_LENGTH * i, "hex");
        }
        return this.publishGovernanceMessage(timestamp, "Core", payload, 2, 0, uptickSequence);
    };
    GovernanceEmitter.prototype.publishWormholeUpgradeContract = function (timestamp, chain, newContract, uptickSequence) {
        if (uptickSequence === void 0) { uptickSequence = true; }
        var payload = Buffer.alloc(32);
        payload.write(tryNativeToHexString(newContract, chain), 0, "hex");
        return this.publishGovernanceMessage(timestamp, "Core", payload, 1, chain, uptickSequence);
    };
    GovernanceEmitter.prototype.publishTokenBridgeRegisterChain = function (timestamp, chain, address, uptickSequence) {
        if (uptickSequence === void 0) { uptickSequence = true; }
        var payload = Buffer.alloc(34);
        payload.writeUInt16BE(chain, 0);
        payload.write(tryNativeToHexString(address, chain), 2, "hex");
        return this.publishGovernanceMessage(timestamp, "TokenBridge", payload, 1, 0, uptickSequence);
    };
    GovernanceEmitter.prototype.publishTokenBridgeUpgradeContract = function (timestamp, chain, newContract, uptickSequence) {
        if (uptickSequence === void 0) { uptickSequence = true; }
        var payload = Buffer.alloc(32);
        payload.write(tryNativeToHexString(newContract, this.chain), 0, "hex");
        return this.publishGovernanceMessage(timestamp, "TokenBridge", payload, 2, chain, uptickSequence);
    };
    GovernanceEmitter.prototype.publishNftBridgeRegisterChain = function (timestamp, chain, address, uptickSequence) {
        if (uptickSequence === void 0) { uptickSequence = true; }
        var payload = Buffer.alloc(34);
        payload.writeUInt16BE(chain, 0);
        payload.write(tryNativeToHexString(address, chain), 2, "hex");
        return this.publishGovernanceMessage(timestamp, "NFTBridge", payload, 1, 0, uptickSequence);
    };
    GovernanceEmitter.prototype.publishNftBridgeUpgradeContract = function (timestamp, chain, newContract, uptickSequence) {
        if (uptickSequence === void 0) { uptickSequence = true; }
        var payload = Buffer.alloc(32);
        payload.write(tryNativeToHexString(newContract, this.chain), 0, "hex");
        return this.publishGovernanceMessage(timestamp, "NFTBridge", payload, 2, chain, uptickSequence);
    };
    return GovernanceEmitter;
}(MockEmitter));
export { GovernanceEmitter };
