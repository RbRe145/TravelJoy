var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { ACCOUNT_SIZE, createCloseAccountInstruction, createInitializeAccountInstruction, createTransferInstruction, getMinimumBalanceForRentExemptAccount, getMint, NATIVE_MINT, TOKEN_PROGRAM_ID, } from "@solana/spl-token";
import { Keypair, PublicKey, SystemProgram, Transaction, } from "@solana/web3.js";
import { MsgExecuteContract } from "@terra-money/terra.js";
import { fromUint8Array } from "js-base64";
import BN from "bn.js";
import { _parseVAAAlgorand, _submitVAAAlgorand, } from "../algorand";
import { Bridge__factory } from "../ethers-contracts";
import { CHAIN_ID_NEAR, CHAIN_ID_SOLANA, MAX_VAA_DECIMALS, uint8ArrayToHex, callFunctionNear, hashLookup, } from "../utils";
import { MsgExecuteContractCompat as MsgExecuteContractInjective } from "@injectivelabs/sdk-ts";
import { createCompleteTransferNativeInstruction, createCompleteTransferWrappedInstruction, } from "../solana/tokenBridge";
import { parseTokenTransferVaa } from "../vaa";
import { getForeignAssetNear } from "./getForeignAsset";
import { MsgExecuteContract as XplaMsgExecuteContract } from "@xpla/xpla.js";
import { completeTransferAndRegister } from "../aptos";
export function redeemOnEth(tokenBridgeAddress, signer, signedVAA, overrides) {
    if (overrides === void 0) { overrides = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var bridge, v, receipt;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    bridge = Bridge__factory.connect(tokenBridgeAddress, signer);
                    return [4 /*yield*/, bridge.completeTransfer(signedVAA, overrides)];
                case 1:
                    v = _a.sent();
                    return [4 /*yield*/, v.wait()];
                case 2:
                    receipt = _a.sent();
                    return [2 /*return*/, receipt];
            }
        });
    });
}
export function redeemOnEthNative(tokenBridgeAddress, signer, signedVAA, overrides) {
    if (overrides === void 0) { overrides = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var bridge, v, receipt;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    bridge = Bridge__factory.connect(tokenBridgeAddress, signer);
                    return [4 /*yield*/, bridge.completeTransferAndUnwrapETH(signedVAA, overrides)];
                case 1:
                    v = _a.sent();
                    return [4 /*yield*/, v.wait()];
                case 2:
                    receipt = _a.sent();
                    return [2 /*return*/, receipt];
            }
        });
    });
}
export function redeemOnTerra(tokenBridgeAddress, walletAddress, signedVAA) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new MsgExecuteContract(walletAddress, tokenBridgeAddress, {
                    submit_vaa: {
                        data: fromUint8Array(signedVAA),
                    },
                })];
        });
    });
}
/**
 * Submits the supplied VAA to Injective
 * @param tokenBridgeAddress Address of Inj token bridge contract
 * @param walletAddress Address of wallet in inj format
 * @param signedVAA VAA with the attestation message
 * @returns Message to be broadcast
 */
export function submitVAAOnInjective(tokenBridgeAddress, walletAddress, signedVAA) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, MsgExecuteContractInjective.fromJSON({
                    contractAddress: tokenBridgeAddress,
                    sender: walletAddress,
                    exec: {
                        msg: {
                            data: fromUint8Array(signedVAA),
                        },
                        action: "submit_vaa",
                    },
                })];
        });
    });
}
export var redeemOnInjective = submitVAAOnInjective;
export function redeemOnXpla(tokenBridgeAddress, walletAddress, signedVAA) {
    return new XplaMsgExecuteContract(walletAddress, tokenBridgeAddress, {
        submit_vaa: {
            data: fromUint8Array(signedVAA),
        },
    });
}
export function redeemAndUnwrapOnSolana(connection, bridgeAddress, tokenBridgeAddress, payerAddress, signedVaa, commitment) {
    return __awaiter(this, void 0, void 0, function () {
        var parsed, targetPublicKey, targetAmount, rentBalance, payerPublicKey, ancillaryKeypair, completeTransferIx, createAncillaryAccountIx, initAccountIx, balanceTransferIx, closeAccountIx, blockhash, transaction;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    parsed = parseTokenTransferVaa(signedVaa);
                    targetPublicKey = new PublicKey(parsed.to);
                    return [4 /*yield*/, getMint(connection, NATIVE_MINT, commitment).then(function (info) {
                            return parsed.amount * BigInt(Math.pow(10, info.decimals - MAX_VAA_DECIMALS));
                        })];
                case 1:
                    targetAmount = _a.sent();
                    return [4 /*yield*/, getMinimumBalanceForRentExemptAccount(connection, commitment)];
                case 2:
                    rentBalance = _a.sent();
                    if (Buffer.compare(parsed.tokenAddress, NATIVE_MINT.toBuffer()) != 0) {
                        return [2 /*return*/, Promise.reject("tokenAddress != NATIVE_MINT")];
                    }
                    payerPublicKey = new PublicKey(payerAddress);
                    ancillaryKeypair = Keypair.generate();
                    completeTransferIx = createCompleteTransferNativeInstruction(tokenBridgeAddress, bridgeAddress, payerPublicKey, signedVaa);
                    createAncillaryAccountIx = SystemProgram.createAccount({
                        fromPubkey: payerPublicKey,
                        newAccountPubkey: ancillaryKeypair.publicKey,
                        lamports: rentBalance,
                        space: ACCOUNT_SIZE,
                        programId: TOKEN_PROGRAM_ID,
                    });
                    initAccountIx = createInitializeAccountInstruction(ancillaryKeypair.publicKey, NATIVE_MINT, payerPublicKey);
                    balanceTransferIx = createTransferInstruction(targetPublicKey, ancillaryKeypair.publicKey, payerPublicKey, targetAmount.valueOf());
                    closeAccountIx = createCloseAccountInstruction(ancillaryKeypair.publicKey, //account to close
                    payerPublicKey, //Remaining funds destination
                    payerPublicKey //authority
                    );
                    return [4 /*yield*/, connection.getLatestBlockhash(commitment)];
                case 3:
                    blockhash = (_a.sent()).blockhash;
                    transaction = new Transaction();
                    transaction.recentBlockhash = blockhash;
                    transaction.feePayer = payerPublicKey;
                    transaction.add(completeTransferIx, createAncillaryAccountIx, initAccountIx, balanceTransferIx, closeAccountIx);
                    transaction.partialSign(ancillaryKeypair);
                    return [2 /*return*/, transaction];
            }
        });
    });
}
export function redeemOnSolana(connection, bridgeAddress, tokenBridgeAddress, payerAddress, signedVaa, feeRecipientAddress, commitment) {
    return __awaiter(this, void 0, void 0, function () {
        var parsed, createCompleteTransferInstruction, transaction, blockhash;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    parsed = parseTokenTransferVaa(signedVaa);
                    createCompleteTransferInstruction = parsed.tokenChain == CHAIN_ID_SOLANA
                        ? createCompleteTransferNativeInstruction
                        : createCompleteTransferWrappedInstruction;
                    transaction = new Transaction().add(createCompleteTransferInstruction(tokenBridgeAddress, bridgeAddress, payerAddress, parsed, feeRecipientAddress));
                    return [4 /*yield*/, connection.getLatestBlockhash(commitment)];
                case 1:
                    blockhash = (_a.sent()).blockhash;
                    transaction.recentBlockhash = blockhash;
                    transaction.feePayer = new PublicKey(payerAddress);
                    return [2 /*return*/, transaction];
            }
        });
    });
}
/**
 * This basically just submits the VAA to Algorand
 * @param client AlgodV2 client
 * @param tokenBridgeId Token bridge ID
 * @param bridgeId Core bridge ID
 * @param vaa The VAA to be redeemed
 * @param acct Sending account
 * @returns Transaction ID(s)
 */
export function redeemOnAlgorand(client, tokenBridgeId, bridgeId, vaa, senderAddr) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, _submitVAAAlgorand(client, tokenBridgeId, bridgeId, vaa, senderAddr)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
export function redeemOnNear(provider, account, tokenBridge, vaa) {
    return __awaiter(this, void 0, void 0, function () {
        var options, p, _a, found, receiver, token, bal, bal_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    options = [];
                    p = _parseVAAAlgorand(vaa);
                    if (p.ToChain !== CHAIN_ID_NEAR) {
                        throw new Error("Not destined for NEAR");
                    }
                    return [4 /*yield*/, hashLookup(provider, tokenBridge, uint8ArrayToHex(p.ToAddress))];
                case 1:
                    _a = _b.sent(), found = _a.found, receiver = _a.value;
                    if (!found) {
                        throw new Error("Unregistered receiver (receiving account is not registered)");
                    }
                    return [4 /*yield*/, getForeignAssetNear(provider, tokenBridge, p.FromChain, p.Contract)];
                case 2:
                    token = _b.sent();
                    if (!(p.Contract !==
                        "0000000000000000000000000000000000000000000000000000000000000000")) return [3 /*break*/, 5];
                    if (token === "" || token === null) {
                        throw new Error("Unregistered token (has it been attested?)");
                    }
                    return [4 /*yield*/, callFunctionNear(provider, token, "storage_balance_of", {
                            account_id: receiver,
                        })];
                case 3:
                    bal = _b.sent();
                    if (bal === null) {
                        options.push({
                            contractId: token,
                            methodName: "storage_deposit",
                            args: { account_id: receiver, registration_only: true },
                            gas: new BN("100000000000000"),
                            attachedDeposit: new BN("2000000000000000000000"), // 0.002 NEAR
                        });
                    }
                    if (!(p.Fee !== undefined &&
                        Buffer.compare(p.Fee, Buffer.from("0000000000000000000000000000000000000000000000000000000000000000", "hex")) !== 0)) return [3 /*break*/, 5];
                    return [4 /*yield*/, callFunctionNear(provider, token, "storage_balance_of", {
                            account_id: account,
                        })];
                case 4:
                    bal_1 = _b.sent();
                    if (bal_1 === null) {
                        options.push({
                            contractId: token,
                            methodName: "storage_deposit",
                            args: { account_id: account, registration_only: true },
                            gas: new BN("100000000000000"),
                            attachedDeposit: new BN("2000000000000000000000"), // 0.002 NEAR
                        });
                    }
                    _b.label = 5;
                case 5:
                    options.push({
                        contractId: tokenBridge,
                        methodName: "submit_vaa",
                        args: {
                            vaa: uint8ArrayToHex(vaa),
                        },
                        attachedDeposit: new BN("100000000000000000000000"),
                        gas: new BN("150000000000000"),
                    });
                    options.push({
                        contractId: tokenBridge,
                        methodName: "submit_vaa",
                        args: {
                            vaa: uint8ArrayToHex(vaa),
                        },
                        attachedDeposit: new BN("100000000000000000000000"),
                        gas: new BN("150000000000000"),
                    });
                    return [2 /*return*/, options];
            }
        });
    });
}
/**
 * Register the token specified in the given VAA in the transfer recipient's account if necessary
 * and complete the transfer.
 * @param client Client used to transfer data to/from Aptos node
 * @param tokenBridgeAddress Address of token bridge
 * @param transferVAA Bytes of transfer VAA
 * @returns Transaction payload
 */
export function redeemOnAptos(client, tokenBridgeAddress, transferVAA) {
    return completeTransferAndRegister(client, tokenBridgeAddress, transferVAA);
}
