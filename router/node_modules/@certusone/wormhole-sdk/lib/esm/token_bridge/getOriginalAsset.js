var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { PublicKey, } from "@solana/web3.js";
import { ethers } from "ethers";
import { arrayify, sha256, zeroPad } from "ethers/lib/utils";
import { decodeLocalState } from "../algorand";
import { buildTokenId, isNativeCosmWasmDenom } from "../cosmwasm/address";
import { TokenImplementation__factory } from "../ethers-contracts";
import { buildNativeId } from "../terra";
import { canonicalAddress } from "../cosmos";
import { assertChain, CHAIN_ID_ALGORAND, CHAIN_ID_APTOS, CHAIN_ID_NEAR, CHAIN_ID_INJECTIVE, CHAIN_ID_SOLANA, CHAIN_ID_TERRA, coalesceChainId, hexToUint8Array, coalesceCosmWasmChainId, callFunctionNear, isValidAptosType, parseSmartContractStateResponse, } from "../utils";
import { safeBigIntToNumber } from "../utils/bigint";
import { getIsWrappedAssetAlgorand, getIsWrappedAssetEth, getIsWrappedAssetNear, } from "./getIsWrappedAsset";
import { sha3_256 } from "js-sha3";
import { getWrappedMeta } from "../solana/tokenBridge";
/**
 * Returns a origin chain and asset address on {originChain} for a provided Wormhole wrapped address
 * @param tokenBridgeAddress
 * @param provider
 * @param wrappedAddress
 * @returns
 */
export function getOriginalAssetEth(tokenBridgeAddress, provider, wrappedAddress, lookupChain) {
    return __awaiter(this, void 0, void 0, function () {
        var isWrapped, token, chainId, assetAddress;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getIsWrappedAssetEth(tokenBridgeAddress, provider, wrappedAddress)];
                case 1:
                    isWrapped = _a.sent();
                    if (!isWrapped) return [3 /*break*/, 4];
                    token = TokenImplementation__factory.connect(wrappedAddress, provider);
                    return [4 /*yield*/, token.chainId()];
                case 2:
                    chainId = (_a.sent());
                    return [4 /*yield*/, token.nativeContract()];
                case 3:
                    assetAddress = _a.sent();
                    return [2 /*return*/, {
                            isWrapped: true,
                            chainId: chainId,
                            assetAddress: arrayify(assetAddress),
                        }];
                case 4: return [2 /*return*/, {
                        isWrapped: false,
                        chainId: coalesceChainId(lookupChain),
                        assetAddress: zeroPad(arrayify(wrappedAddress), 32),
                    }];
            }
        });
    });
}
export function getOriginalAssetTerra(client, wrappedAddress) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getOriginalAssetCosmWasm(client, wrappedAddress, CHAIN_ID_TERRA)];
        });
    });
}
/**
 * Returns information about the asset
 * @param wrappedAddress Address of the asset in wormhole wrapped format (hex string)
 * @param client WASM api client
 * @returns Information about the asset
 */
export function getOriginalAssetInjective(wrappedAddress, client) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, response, parsed, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    chainId = CHAIN_ID_INJECTIVE;
                    if (isNativeCosmWasmDenom(chainId, wrappedAddress)) {
                        return [2 /*return*/, {
                                isWrapped: false,
                                chainId: chainId,
                                assetAddress: hexToUint8Array(buildTokenId(chainId, wrappedAddress)),
                            }];
                    }
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, client.fetchSmartContractState(wrappedAddress, Buffer.from(JSON.stringify({
                            wrapped_asset_info: {},
                        })).toString("base64"))];
                case 2:
                    response = _b.sent();
                    parsed = parseSmartContractStateResponse(response);
                    return [2 /*return*/, {
                            isWrapped: true,
                            chainId: parsed.asset_chain,
                            assetAddress: new Uint8Array(Buffer.from(parsed.asset_address, "base64")),
                        }];
                case 3:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/, {
                        isWrapped: false,
                        chainId: chainId,
                        assetAddress: hexToUint8Array(buildTokenId(chainId, wrappedAddress)),
                    }];
            }
        });
    });
}
export function getOriginalAssetXpla(client, wrappedAddress) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getOriginalAssetCosmWasm(client, wrappedAddress, "xpla")];
        });
    });
}
export function getOriginalAssetCosmWasm(client, wrappedAddress, lookupChain) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, result, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    chainId = coalesceCosmWasmChainId(lookupChain);
                    if (isNativeCosmWasmDenom(chainId, wrappedAddress)) {
                        return [2 /*return*/, {
                                isWrapped: false,
                                chainId: chainId,
                                assetAddress: chainId === CHAIN_ID_TERRA
                                    ? buildNativeId(wrappedAddress)
                                    : hexToUint8Array(buildTokenId(chainId, wrappedAddress)),
                            }];
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, client.wasm.contractQuery(wrappedAddress, {
                            wrapped_asset_info: {},
                        })];
                case 2:
                    result = _a.sent();
                    if (result) {
                        return [2 /*return*/, {
                                isWrapped: true,
                                chainId: result.asset_chain,
                                assetAddress: new Uint8Array(Buffer.from(result.asset_address, "base64")),
                            }];
                    }
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _a.sent();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/, {
                        isWrapped: false,
                        chainId: chainId,
                        assetAddress: chainId === CHAIN_ID_TERRA
                            ? zeroPad(canonicalAddress(wrappedAddress), 32)
                            : hexToUint8Array(buildTokenId(chainId, wrappedAddress)),
                    }];
            }
        });
    });
}
/**
 * Returns a origin chain and asset address on {originChain} for a provided Wormhole wrapped address
 * @param connection
 * @param tokenBridgeAddress
 * @param mintAddress
 * @param [commitment]
 * @returns
 */
export function getOriginalAssetSolana(connection, tokenBridgeAddress, mintAddress, commitment) {
    return __awaiter(this, void 0, void 0, function () {
        var mint_1;
        return __generator(this, function (_a) {
            try {
                mint_1 = new PublicKey(mintAddress);
                return [2 /*return*/, getWrappedMeta(connection, tokenBridgeAddress, mintAddress, commitment)
                        .catch(function (_) { return null; })
                        .then(function (meta) {
                        if (meta === null) {
                            return {
                                isWrapped: false,
                                chainId: CHAIN_ID_SOLANA,
                                assetAddress: mint_1.toBytes(),
                            };
                        }
                        else {
                            return {
                                isWrapped: true,
                                chainId: meta.chain,
                                assetAddress: Uint8Array.from(meta.tokenAddress),
                            };
                        }
                    })];
            }
            catch (_) {
                return [2 /*return*/, {
                        isWrapped: false,
                        chainId: CHAIN_ID_SOLANA,
                        assetAddress: new Uint8Array(32),
                    }];
            }
            return [2 /*return*/];
        });
    });
}
export var getOriginalAssetSol = getOriginalAssetSolana;
/**
 * Returns an origin chain and asset address on {originChain} for a provided Wormhole wrapped address
 * @param client Algodv2 client
 * @param tokenBridgeId Application ID of the token bridge
 * @param assetId Algorand asset index
 * @returns wrapped wormhole information structure
 */
export function getOriginalAssetAlgorand(client, tokenBridgeId, assetId) {
    return __awaiter(this, void 0, void 0, function () {
        var retVal, _a, assetInfo, lsa, dls, dlsBuffer;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    retVal = {
                        isWrapped: false,
                        chainId: CHAIN_ID_ALGORAND,
                        assetAddress: new Uint8Array(),
                    };
                    _a = retVal;
                    return [4 /*yield*/, getIsWrappedAssetAlgorand(client, tokenBridgeId, assetId)];
                case 1:
                    _a.isWrapped = _b.sent();
                    if (!retVal.isWrapped) {
                        retVal.assetAddress = zeroPad(arrayify(ethers.BigNumber.from(assetId)), 32);
                        return [2 /*return*/, retVal];
                    }
                    return [4 /*yield*/, client.getAssetByID(safeBigIntToNumber(assetId)).do()];
                case 2:
                    assetInfo = _b.sent();
                    lsa = assetInfo.params.creator;
                    return [4 /*yield*/, decodeLocalState(client, tokenBridgeId, lsa)];
                case 3:
                    dls = _b.sent();
                    dlsBuffer = Buffer.from(dls);
                    retVal.chainId = dlsBuffer.readInt16BE(92);
                    retVal.assetAddress = new Uint8Array(dlsBuffer.slice(60, 60 + 32));
                    return [2 /*return*/, retVal];
            }
        });
    });
}
export function getOriginalAssetNear(provider, tokenAccount, assetAccount) {
    return __awaiter(this, void 0, void 0, function () {
        var retVal, buf;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    retVal = {
                        isWrapped: false,
                        chainId: CHAIN_ID_NEAR,
                        assetAddress: new Uint8Array(),
                    };
                    retVal.isWrapped = getIsWrappedAssetNear(tokenAccount, assetAccount);
                    if (!retVal.isWrapped) {
                        retVal.assetAddress = assetAccount
                            ? arrayify(sha256(Buffer.from(assetAccount)))
                            : zeroPad(arrayify("0x"), 32);
                        return [2 /*return*/, retVal];
                    }
                    return [4 /*yield*/, callFunctionNear(provider, tokenAccount, "get_original_asset", {
                            token: assetAccount,
                        })];
                case 1:
                    buf = _a.sent();
                    retVal.chainId = buf[1];
                    retVal.assetAddress = hexToUint8Array(buf[0]);
                    return [2 /*return*/, retVal];
            }
        });
    });
}
/**
 * Gets the origin chain ID and address of an asset on Aptos, given its fully qualified type.
 * @param client Client used to transfer data to/from Aptos node
 * @param tokenBridgeAddress Address of token bridge
 * @param fullyQualifiedType Fully qualified type of asset
 * @returns Original chain ID and address of asset
 */
export function getOriginalAssetAptos(client, tokenBridgeAddress, fullyQualifiedType) {
    return __awaiter(this, void 0, void 0, function () {
        var originInfo, _a, chainId, assetAddress;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!isValidAptosType(fullyQualifiedType)) {
                        throw new Error("Invalid qualified type");
                    }
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, client.getAccountResource(fullyQualifiedType.split("::")[0], tokenBridgeAddress + "::state::OriginInfo")];
                case 2:
                    originInfo = (_b.sent()).data;
                    return [3 /*break*/, 4];
                case 3:
                    _a = _b.sent();
                    return [2 /*return*/, {
                            isWrapped: false,
                            chainId: CHAIN_ID_APTOS,
                            assetAddress: hexToUint8Array(sha3_256(fullyQualifiedType)),
                        }];
                case 4:
                    if (!!originInfo) {
                        chainId = parseInt(originInfo.token_chain.number);
                        assertChain(chainId);
                        assetAddress = hexToUint8Array(originInfo.token_address.external_address.substring(2));
                        return [2 /*return*/, {
                                isWrapped: true,
                                chainId: chainId,
                                assetAddress: assetAddress,
                            }];
                    }
                    else {
                        // native asset
                        return [2 /*return*/, {
                                isWrapped: false,
                                chainId: CHAIN_ID_APTOS,
                                assetAddress: hexToUint8Array(sha3_256(fullyQualifiedType)),
                            }];
                    }
                    return [2 /*return*/];
            }
        });
    });
}
