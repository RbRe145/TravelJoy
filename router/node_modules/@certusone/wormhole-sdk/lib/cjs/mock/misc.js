"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ethSignWithPrivate = exports.ethPrivateToPublic = void 0;
var utils_1 = require("../utils");
var elliptic = __importStar(require("elliptic"));
function ethPrivateToPublic(key) {
    var ecdsa = new elliptic.ec("secp256k1");
    var publicKey = ecdsa.keyFromPrivate(key).getPublic("hex");
    return utils_1.keccak256(Buffer.from(publicKey, "hex").subarray(1)).subarray(12);
}
exports.ethPrivateToPublic = ethPrivateToPublic;
function ethSignWithPrivate(privateKey, hash) {
    if (hash.length != 32) {
        throw new Error("hash.length != 32");
    }
    var ecdsa = new elliptic.ec("secp256k1");
    var key = ecdsa.keyFromPrivate(privateKey);
    return key.sign(hash, { canonical: true });
}
exports.ethSignWithPrivate = ethSignWithPrivate;
