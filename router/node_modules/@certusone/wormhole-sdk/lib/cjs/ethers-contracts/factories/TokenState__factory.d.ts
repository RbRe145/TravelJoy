import { Signer, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenState, TokenStateInterface } from "../TokenState";
export declare class TokenState__factory extends ContractFactory {
    constructor(signer?: Signer);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<TokenState>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): TokenState;
    connect(signer: Signer): TokenState__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5060c78061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80637ecebe0014602d575b600080fd5b605360383660046065565b6001600160a01b03166000908152600e602052604090205490565b60405190815260200160405180910390f35b6000602082840312156075578081fd5b81356001600160a01b0381168114608a578182fd5b939250505056fea264697066735822122078df88d7ea4337649e62641e313b81030eae221fd6d08f4740654cc4483a2d6564736f6c63430008040033";
    static readonly abi: {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): TokenStateInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TokenState;
}
