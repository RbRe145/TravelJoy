"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompleteTransferNativeAccounts = exports.createCompleteTransferNativeInstruction = void 0;
var web3_js_1 = require("@solana/web3.js");
var spl_token_1 = require("@solana/spl-token");
var program_1 = require("../program");
var wormhole_1 = require("../../wormhole");
var accounts_1 = require("../accounts");
var vaa_1 = require("../../../vaa");
function createCompleteTransferNativeInstruction(tokenBridgeProgramId, wormholeProgramId, payer, vaa, feeRecipient) {
    var methods = program_1.createReadOnlyTokenBridgeProgramInterface(tokenBridgeProgramId).methods.completeNative();
    // @ts-ignore
    return methods._ixFn.apply(methods, __spreadArray(__spreadArray([], __read(methods._args)), [{
            accounts: getCompleteTransferNativeAccounts(tokenBridgeProgramId, wormholeProgramId, payer, vaa, feeRecipient),
            signers: undefined,
            remainingAccounts: undefined,
            preInstructions: undefined,
            postInstructions: undefined,
        }]));
}
exports.createCompleteTransferNativeInstruction = createCompleteTransferNativeInstruction;
function getCompleteTransferNativeAccounts(tokenBridgeProgramId, wormholeProgramId, payer, vaa, feeRecipient) {
    var parsed = vaa_1.isBytes(vaa) ? vaa_1.parseTokenTransferVaa(vaa) : vaa;
    var mint = new web3_js_1.PublicKey(parsed.tokenAddress);
    return {
        payer: new web3_js_1.PublicKey(payer),
        config: accounts_1.deriveTokenBridgeConfigKey(tokenBridgeProgramId),
        vaa: wormhole_1.derivePostedVaaKey(wormholeProgramId, parsed.hash),
        claim: wormhole_1.deriveClaimKey(tokenBridgeProgramId, parsed.emitterAddress, parsed.emitterChain, parsed.sequence),
        endpoint: accounts_1.deriveEndpointKey(tokenBridgeProgramId, parsed.emitterChain, parsed.emitterAddress),
        to: new web3_js_1.PublicKey(parsed.to),
        toFees: new web3_js_1.PublicKey(feeRecipient === undefined ? parsed.to : feeRecipient),
        custody: accounts_1.deriveCustodyKey(tokenBridgeProgramId, mint),
        mint: mint,
        custodySigner: accounts_1.deriveCustodySignerKey(tokenBridgeProgramId),
        rent: web3_js_1.SYSVAR_RENT_PUBKEY,
        systemProgram: web3_js_1.SystemProgram.programId,
        tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
        wormholeProgram: new web3_js_1.PublicKey(wormholeProgramId),
    };
}
exports.getCompleteTransferNativeAccounts = getCompleteTransferNativeAccounts;
