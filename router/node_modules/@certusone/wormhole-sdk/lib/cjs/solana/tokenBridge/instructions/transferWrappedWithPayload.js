"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransferWrappedWithPayloadAccounts = exports.createTransferWrappedWithPayloadInstruction = void 0;
var web3_js_1 = require("@solana/web3.js");
var spl_token_1 = require("@solana/spl-token");
var program_1 = require("../program");
var wormhole_1 = require("../../wormhole");
var accounts_1 = require("../accounts");
function createTransferWrappedWithPayloadInstruction(tokenBridgeProgramId, wormholeProgramId, payer, message, from, fromOwner, tokenChain, tokenAddress, nonce, amount, targetAddress, targetChain, payload) {
    var methods = program_1.createReadOnlyTokenBridgeProgramInterface(tokenBridgeProgramId).methods.transferWrappedWithPayload(nonce, amount, Buffer.from(targetAddress), targetChain, Buffer.from(payload), null);
    // @ts-ignore
    return methods._ixFn.apply(methods, __spreadArray(__spreadArray([], __read(methods._args)), [{
            accounts: getTransferWrappedWithPayloadAccounts(tokenBridgeProgramId, wormholeProgramId, payer, message, from, fromOwner, tokenChain, tokenAddress),
            signers: undefined,
            remainingAccounts: undefined,
            preInstructions: undefined,
            postInstructions: undefined,
        }]));
}
exports.createTransferWrappedWithPayloadInstruction = createTransferWrappedWithPayloadInstruction;
function getTransferWrappedWithPayloadAccounts(tokenBridgeProgramId, wormholeProgramId, payer, message, from, fromOwner, tokenChain, tokenAddress, cpiProgramId) {
    var mint = accounts_1.deriveWrappedMintKey(tokenBridgeProgramId, tokenChain, tokenAddress);
    var _a = wormhole_1.getPostMessageCpiAccounts(tokenBridgeProgramId, wormholeProgramId, payer, message), wormholeBridge = _a.wormholeBridge, wormholeMessage = _a.wormholeMessage, wormholeEmitter = _a.wormholeEmitter, wormholeSequence = _a.wormholeSequence, wormholeFeeCollector = _a.wormholeFeeCollector, clock = _a.clock, rent = _a.rent, systemProgram = _a.systemProgram;
    return {
        payer: new web3_js_1.PublicKey(payer),
        config: accounts_1.deriveTokenBridgeConfigKey(tokenBridgeProgramId),
        from: new web3_js_1.PublicKey(from),
        fromOwner: new web3_js_1.PublicKey(fromOwner),
        mint: mint,
        wrappedMeta: accounts_1.deriveWrappedMetaKey(tokenBridgeProgramId, mint),
        authoritySigner: accounts_1.deriveAuthoritySignerKey(tokenBridgeProgramId),
        wormholeBridge: wormholeBridge,
        wormholeMessage: wormholeMessage,
        wormholeEmitter: wormholeEmitter,
        wormholeSequence: wormholeSequence,
        wormholeFeeCollector: wormholeFeeCollector,
        clock: clock,
        sender: new web3_js_1.PublicKey(cpiProgramId === undefined ? payer : accounts_1.deriveSenderAccountKey(cpiProgramId)),
        rent: rent,
        systemProgram: systemProgram,
        wormholeProgram: new web3_js_1.PublicKey(wormholeProgramId),
        tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
    };
}
exports.getTransferWrappedWithPayloadAccounts = getTransferWrappedWithPayloadAccounts;
