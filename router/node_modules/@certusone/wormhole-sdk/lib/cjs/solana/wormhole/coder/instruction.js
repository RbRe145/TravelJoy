"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WormholeInstruction = exports.WormholeInstructionCoder = void 0;
var bs58_1 = __importDefault(require("bs58"));
var lodash_1 = require("lodash");
var borsh = __importStar(require("@coral-xyz/borsh"));
var idl_1 = require("./idl");
// Inspired by  coral-xyz/anchor
//
// https://github.com/coral-xyz/anchor/blob/master/ts/packages/anchor/src/coder/borsh/instruction.ts
var WormholeInstructionCoder = /** @class */ (function () {
    function WormholeInstructionCoder(idl) {
        this.ixLayout = WormholeInstructionCoder.parseIxLayout(idl);
    }
    WormholeInstructionCoder.parseIxLayout = function (idl) {
        var stateMethods = idl.state ? idl.state.methods : [];
        var ixLayouts = stateMethods
            .map(function (m) {
            var fieldLayouts = m.args.map(function (arg) {
                var _a, _b;
                return idl_1.IdlCoder.fieldLayout(arg, Array.from(__spreadArray(__spreadArray([], __read(((_a = idl.accounts) !== null && _a !== void 0 ? _a : []))), __read(((_b = idl.types) !== null && _b !== void 0 ? _b : [])))));
            });
            var name = lodash_1.camelCase(m.name);
            return [name, borsh.struct(fieldLayouts, name)];
        })
            .concat(idl.instructions.map(function (ix) {
            var fieldLayouts = ix.args.map(function (arg) {
                var _a, _b;
                return idl_1.IdlCoder.fieldLayout(arg, Array.from(__spreadArray(__spreadArray([], __read(((_a = idl.accounts) !== null && _a !== void 0 ? _a : []))), __read(((_b = idl.types) !== null && _b !== void 0 ? _b : [])))));
            });
            var name = lodash_1.camelCase(ix.name);
            return [name, borsh.struct(fieldLayouts, name)];
        }));
        return new Map(ixLayouts);
    };
    WormholeInstructionCoder.prototype.encode = function (ixName, ix) {
        var buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.
        var methodName = lodash_1.camelCase(ixName);
        var layout = this.ixLayout.get(methodName);
        if (!layout) {
            throw new Error("Unknown method: " + methodName);
        }
        var len = layout.encode(ix, buffer);
        var data = buffer.slice(0, len);
        return encodeWormholeInstructionData(WormholeInstruction[lodash_1.upperFirst(methodName)], data);
    };
    WormholeInstructionCoder.prototype.encodeState = function (_ixName, _ix) {
        throw new Error("Wormhole program does not have state");
    };
    WormholeInstructionCoder.prototype.decode = function (ix, encoding) {
        var _a;
        if (encoding === void 0) { encoding = "hex"; }
        if (typeof ix === "string") {
            ix = encoding === "hex" ? Buffer.from(ix, "hex") : bs58_1.default.decode(ix);
        }
        var discriminator = ix.slice(0, 1).readInt8();
        var data = ix.slice(1);
        var name = lodash_1.camelCase(WormholeInstruction[discriminator]);
        var layout = this.ixLayout.get(name);
        if (!layout) {
            return null;
        }
        return { data: (_a = this.ixLayout.get(name)) === null || _a === void 0 ? void 0 : _a.decode(data), name: name };
    };
    return WormholeInstructionCoder;
}());
exports.WormholeInstructionCoder = WormholeInstructionCoder;
/** Solitaire enum of existing the Core Bridge's instructions.
 *
 * https://github.com/certusone/wormhole/blob/main/solana/bridge/program/src/lib.rs#L92
 */
var WormholeInstruction;
(function (WormholeInstruction) {
    WormholeInstruction[WormholeInstruction["Initialize"] = 0] = "Initialize";
    WormholeInstruction[WormholeInstruction["PostMessage"] = 1] = "PostMessage";
    WormholeInstruction[WormholeInstruction["PostVaa"] = 2] = "PostVaa";
    WormholeInstruction[WormholeInstruction["SetFees"] = 3] = "SetFees";
    WormholeInstruction[WormholeInstruction["TransferFees"] = 4] = "TransferFees";
    WormholeInstruction[WormholeInstruction["UpgradeContract"] = 5] = "UpgradeContract";
    WormholeInstruction[WormholeInstruction["UpgradeGuardianSet"] = 6] = "UpgradeGuardianSet";
    WormholeInstruction[WormholeInstruction["VerifySignatures"] = 7] = "VerifySignatures";
    WormholeInstruction[WormholeInstruction["PostMessageUnreliable"] = 8] = "PostMessageUnreliable";
})(WormholeInstruction = exports.WormholeInstruction || (exports.WormholeInstruction = {}));
function encodeWormholeInstructionData(discriminator, data) {
    var instructionData = Buffer.alloc(1 + (data === undefined ? 0 : data.length));
    instructionData.writeUInt8(discriminator, 0);
    if (data !== undefined) {
        instructionData.write(data.toString("hex"), 1, "hex");
    }
    return instructionData;
}
