"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompleteWrappedMetaAccounts = exports.createCompleteWrappedMetaInstruction = void 0;
var web3_js_1 = require("@solana/web3.js");
var spl_token_1 = require("@solana/spl-token");
var program_1 = require("../program");
var wormhole_1 = require("../../wormhole");
var accounts_1 = require("../accounts");
var vaa_1 = require("../../../vaa");
var utils_1 = require("../../utils");
function createCompleteWrappedMetaInstruction(nftBridgeProgramId, wormholeProgramId, payer, vaa) {
    var methods = program_1.createReadOnlyNftBridgeProgramInterface(nftBridgeProgramId).methods.completeWrappedMeta();
    // @ts-ignore
    return methods._ixFn.apply(methods, __spreadArray(__spreadArray([], __read(methods._args)), [{
            accounts: getCompleteWrappedMetaAccounts(nftBridgeProgramId, wormholeProgramId, payer, vaa),
            signers: undefined,
            remainingAccounts: undefined,
            preInstructions: undefined,
            postInstructions: undefined,
        }]));
}
exports.createCompleteWrappedMetaInstruction = createCompleteWrappedMetaInstruction;
function getCompleteWrappedMetaAccounts(nftBridgeProgramId, wormholeProgramId, payer, vaa) {
    var parsed = vaa_1.isBytes(vaa) ? vaa_1.parseNftTransferVaa(vaa) : vaa;
    var mint = accounts_1.deriveWrappedMintKey(nftBridgeProgramId, parsed.tokenChain, parsed.tokenAddress, parsed.tokenId);
    return {
        payer: new web3_js_1.PublicKey(payer),
        config: accounts_1.deriveNftBridgeConfigKey(nftBridgeProgramId),
        vaa: wormhole_1.derivePostedVaaKey(wormholeProgramId, parsed.hash),
        endpoint: accounts_1.deriveEndpointKey(nftBridgeProgramId, parsed.emitterChain, parsed.emitterAddress),
        mint: mint,
        wrappedMeta: accounts_1.deriveWrappedMetaKey(nftBridgeProgramId, mint),
        splMetadata: utils_1.deriveSplTokenMetadataKey(mint),
        mintAuthority: accounts_1.deriveMintAuthorityKey(nftBridgeProgramId),
        rent: web3_js_1.SYSVAR_RENT_PUBKEY,
        systemProgram: web3_js_1.SystemProgram.programId,
        tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
        splMetadataProgram: utils_1.SplTokenMetadataProgram.programId,
        wormholeProgram: new web3_js_1.PublicKey(wormholeProgramId),
    };
}
exports.getCompleteWrappedMetaAccounts = getCompleteWrappedMetaAccounts;
