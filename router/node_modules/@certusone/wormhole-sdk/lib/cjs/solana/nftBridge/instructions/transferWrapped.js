"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransferWrappedAccounts = exports.createTransferWrappedInstruction = void 0;
var web3_js_1 = require("@solana/web3.js");
var spl_token_1 = require("@solana/spl-token");
var program_1 = require("../program");
var wormhole_1 = require("../../wormhole");
var accounts_1 = require("../accounts");
var utils_1 = require("../../utils");
function createTransferWrappedInstruction(nftBridgeProgramId, wormholeProgramId, payer, message, from, fromOwner, tokenChain, tokenAddress, tokenId, nonce, targetAddress, targetChain) {
    var methods = program_1.createReadOnlyNftBridgeProgramInterface(nftBridgeProgramId).methods.transferWrapped(nonce, Buffer.from(targetAddress), targetChain);
    // @ts-ignore
    return methods._ixFn.apply(methods, __spreadArray(__spreadArray([], __read(methods._args)), [{
            accounts: getTransferWrappedAccounts(nftBridgeProgramId, wormholeProgramId, payer, message, from, fromOwner, tokenChain, tokenAddress, tokenId),
            signers: undefined,
            remainingAccounts: undefined,
            preInstructions: undefined,
            postInstructions: undefined,
        }]));
}
exports.createTransferWrappedInstruction = createTransferWrappedInstruction;
function getTransferWrappedAccounts(nftBridgeProgramId, wormholeProgramId, payer, message, from, fromOwner, tokenChain, tokenAddress, tokenId) {
    var mint = accounts_1.deriveWrappedMintKey(nftBridgeProgramId, tokenChain, tokenAddress, tokenId);
    var _a = wormhole_1.getPostMessageAccounts(wormholeProgramId, payer, nftBridgeProgramId, message), wormholeBridge = _a.bridge, wormholeMessage = _a.message, wormholeEmitter = _a.emitter, wormholeSequence = _a.sequence, wormholeFeeCollector = _a.feeCollector, clock = _a.clock, rent = _a.rent, systemProgram = _a.systemProgram;
    return {
        payer: new web3_js_1.PublicKey(payer),
        config: accounts_1.deriveNftBridgeConfigKey(nftBridgeProgramId),
        from: new web3_js_1.PublicKey(from),
        fromOwner: new web3_js_1.PublicKey(fromOwner),
        mint: mint,
        wrappedMeta: accounts_1.deriveWrappedMetaKey(nftBridgeProgramId, mint),
        splMetadata: utils_1.deriveSplTokenMetadataKey(mint),
        authoritySigner: accounts_1.deriveAuthoritySignerKey(nftBridgeProgramId),
        wormholeBridge: wormholeBridge,
        wormholeMessage: wormholeMessage,
        wormholeEmitter: wormholeEmitter,
        wormholeSequence: wormholeSequence,
        wormholeFeeCollector: wormholeFeeCollector,
        clock: clock,
        rent: rent,
        systemProgram: systemProgram,
        tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
        splMetadataProgram: utils_1.SplTokenMetadataProgram.programId,
        wormholeProgram: new web3_js_1.PublicKey(wormholeProgramId),
    };
}
exports.getTransferWrappedAccounts = getTransferWrappedAccounts;
