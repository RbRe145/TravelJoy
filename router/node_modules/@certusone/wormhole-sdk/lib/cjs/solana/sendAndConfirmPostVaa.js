"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPostSignedVaaTransactions = exports.postVaa = exports.postVaaWithRetry = void 0;
var web3_js_1 = require("@solana/web3.js");
var utils_1 = require("./utils");
var wormhole_1 = require("./wormhole");
var wormhole_2 = require("../vaa/wormhole");
function postVaaWithRetry(connection, signTransaction, wormholeProgramId, payer, vaa, maxRetries, commitment) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, unsignedTransactions, signers, postVaaTransaction, responses, _b, _c, _d, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0: return [4 /*yield*/, createPostSignedVaaTransactions(connection, wormholeProgramId, payer, vaa, commitment)];
                case 1:
                    _a = _f.sent(), unsignedTransactions = _a.unsignedTransactions, signers = _a.signers;
                    postVaaTransaction = unsignedTransactions.pop();
                    return [4 /*yield*/, utils_1.sendAndConfirmTransactionsWithRetry(connection, utils_1.modifySignTransaction.apply(void 0, __spreadArray([signTransaction], __read(signers))), payer.toString(), unsignedTransactions, maxRetries)];
                case 2:
                    responses = _f.sent();
                    _c = 
                    //While the signature_set is used to create the final instruction, it doesn't need to sign it.
                    (_b = responses.push).apply;
                    _d = [
                        //While the signature_set is used to create the final instruction, it doesn't need to sign it.
                        responses];
                    _e = [[]];
                    return [4 /*yield*/, utils_1.sendAndConfirmTransactionsWithRetry(connection, signTransaction, payer.toString(), [postVaaTransaction], maxRetries)];
                case 3:
                    //While the signature_set is used to create the final instruction, it doesn't need to sign it.
                    _c.apply(_b, _d.concat([__spreadArray.apply(void 0, _e.concat([__read.apply(void 0, [(_f.sent())])]))]));
                    return [2 /*return*/, responses];
            }
        });
    });
}
exports.postVaaWithRetry = postVaaWithRetry;
function postVaa(connection, signTransaction, wormholeProgramId, payer, vaa, options, asyncVerifySignatures) {
    if (asyncVerifySignatures === void 0) { asyncVerifySignatures = true; }
    return __awaiter(this, void 0, void 0, function () {
        var _a, unsignedTransactions, signers, postVaaTransaction, verifySignatures, output, verified, unsignedTransactions_1, unsignedTransactions_1_1, transaction, _b, _c, e_1_1, _d, _e;
        var e_1, _f;
        var _this = this;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0: return [4 /*yield*/, createPostSignedVaaTransactions(connection, wormholeProgramId, payer, vaa, options === null || options === void 0 ? void 0 : options.commitment)];
                case 1:
                    _a = _g.sent(), unsignedTransactions = _a.unsignedTransactions, signers = _a.signers;
                    postVaaTransaction = unsignedTransactions.pop();
                    verifySignatures = function (transaction) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            return [2 /*return*/, utils_1.signSendAndConfirmTransaction(connection, payer, utils_1.modifySignTransaction.apply(void 0, __spreadArray([signTransaction], __read(signers))), transaction, options)];
                        });
                    }); };
                    output = [];
                    if (!asyncVerifySignatures) return [3 /*break*/, 3];
                    return [4 /*yield*/, Promise.all(unsignedTransactions.map(function (transaction) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, verifySignatures(transaction)];
                        }); }); }))];
                case 2:
                    verified = _g.sent();
                    output.push.apply(output, __spreadArray([], __read(verified)));
                    return [3 /*break*/, 10];
                case 3:
                    _g.trys.push([3, 8, 9, 10]);
                    unsignedTransactions_1 = __values(unsignedTransactions), unsignedTransactions_1_1 = unsignedTransactions_1.next();
                    _g.label = 4;
                case 4:
                    if (!!unsignedTransactions_1_1.done) return [3 /*break*/, 7];
                    transaction = unsignedTransactions_1_1.value;
                    _c = (_b = output).push;
                    return [4 /*yield*/, verifySignatures(transaction)];
                case 5:
                    _c.apply(_b, [_g.sent()]);
                    _g.label = 6;
                case 6:
                    unsignedTransactions_1_1 = unsignedTransactions_1.next();
                    return [3 /*break*/, 4];
                case 7: return [3 /*break*/, 10];
                case 8:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 10];
                case 9:
                    try {
                        if (unsignedTransactions_1_1 && !unsignedTransactions_1_1.done && (_f = unsignedTransactions_1.return)) _f.call(unsignedTransactions_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 10:
                    _e = (_d = output).push;
                    return [4 /*yield*/, utils_1.signSendAndConfirmTransaction(connection, payer, signTransaction, postVaaTransaction, options)];
                case 11:
                    _e.apply(_d, [_g.sent()]);
                    return [2 /*return*/, output];
            }
        });
    });
}
exports.postVaa = postVaa;
/** Send transactions for `verify_signatures` and `post_vaa` instructions.
 *
 * Using a signed VAA, execute transactions generated by {@link verifySignatures} and
 * {@link postVaa}. At most 4 transactions are sent (up to 3 from signature verification
 * and 1 to post VAA data to an account).
 *
 * @param {Connection} connection - Solana web3 connection
 * @param {PublicKeyInitData} wormholeProgramId - wormhole program address
 * @param {web3.Keypair} payer - transaction signer address
 * @param {Buffer} signedVaa - bytes of signed VAA
 * @param {Commitment} [options] - Solana commitment
 *
 */
function createPostSignedVaaTransactions(connection, wormholeProgramId, payer, vaa, commitment) {
    return __awaiter(this, void 0, void 0, function () {
        var parsed, signatureSet, verifySignaturesInstructions, unsignedTransactions, i;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    parsed = wormhole_2.isBytes(vaa) ? wormhole_2.parseVaa(vaa) : vaa;
                    signatureSet = web3_js_1.Keypair.generate();
                    return [4 /*yield*/, wormhole_1.createVerifySignaturesInstructions(connection, wormholeProgramId, payer, parsed, signatureSet.publicKey, commitment)];
                case 1:
                    verifySignaturesInstructions = _b.sent();
                    unsignedTransactions = [];
                    for (i = 0; i < verifySignaturesInstructions.length; i += 2) {
                        unsignedTransactions.push((_a = new web3_js_1.Transaction()).add.apply(_a, __spreadArray([], __read(verifySignaturesInstructions.slice(i, i + 2)))));
                    }
                    unsignedTransactions.push(new web3_js_1.Transaction().add(wormhole_1.createPostVaaInstruction(wormholeProgramId, payer, parsed, signatureSet.publicKey)));
                    return [2 /*return*/, {
                            unsignedTransactions: unsignedTransactions,
                            signers: [signatureSet],
                        }];
            }
        });
    });
}
exports.createPostSignedVaaTransactions = createPostSignedVaaTransactions;
