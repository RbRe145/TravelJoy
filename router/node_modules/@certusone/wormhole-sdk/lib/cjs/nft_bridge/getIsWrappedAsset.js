"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIsWrappedAssetAptos = exports.getIsWrappedAssetSol = exports.getIsWrappedAssetSolana = exports.getIsWrappedAssetEth = void 0;
var aptos_1 = require("aptos");
var ethers_contracts_1 = require("../ethers-contracts");
var nftBridge_1 = require("../solana/nftBridge");
/**
 * Returns whether or not an asset address on Ethereum is a wormhole wrapped asset
 * @param nftBridgeAddress
 * @param provider
 * @param assetAddress
 * @returns
 */
function getIsWrappedAssetEth(nftBridgeAddress, provider, assetAddress) {
    return __awaiter(this, void 0, void 0, function () {
        var tokenBridge;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!assetAddress)
                        return [2 /*return*/, false];
                    tokenBridge = ethers_contracts_1.Bridge__factory.connect(nftBridgeAddress, provider);
                    return [4 /*yield*/, tokenBridge.isWrappedAsset(assetAddress)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getIsWrappedAssetEth = getIsWrappedAssetEth;
/**
 * Returns whether or not an asset on Solana is a wormhole wrapped asset
 * @param connection
 * @param nftBridgeAddress
 * @param mintAddress
 * @param [commitment]
 * @returns
 */
function getIsWrappedAssetSolana(connection, nftBridgeAddress, mintAddress, commitment) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (!mintAddress) {
                return [2 /*return*/, false];
            }
            return [2 /*return*/, nftBridge_1.getWrappedMeta(connection, nftBridgeAddress, mintAddress, commitment)
                    .catch(function (_) { return null; })
                    .then(function (meta) { return meta != null; })];
        });
    });
}
exports.getIsWrappedAssetSolana = getIsWrappedAssetSolana;
exports.getIsWrappedAssetSol = getIsWrappedAssetSolana;
function getIsWrappedAssetAptos(client, nftBridgeAddress, creatorAddress) {
    return __awaiter(this, void 0, void 0, function () {
        var e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, client.getAccountResource(creatorAddress, nftBridgeAddress + "::state::OriginInfo")];
                case 1:
                    _a.sent();
                    return [2 /*return*/, true];
                case 2:
                    e_1 = _a.sent();
                    if ((e_1 instanceof aptos_1.Types.ApiError || e_1.errorCode === "resource_not_found") &&
                        e_1.status === 404) {
                        return [2 /*return*/, false];
                    }
                    throw e_1;
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.getIsWrappedAssetAptos = getIsWrappedAssetAptos;
