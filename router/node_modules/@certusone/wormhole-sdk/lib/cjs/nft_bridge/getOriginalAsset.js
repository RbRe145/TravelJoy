"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOriginalAssetAptos = exports.getOriginalAssetTerra = exports.getOriginalAssetSol = exports.getOriginalAssetSolana = exports.getOriginalAssetEth = void 0;
var web3_js_1 = require("@solana/web3.js");
var aptos_1 = require("aptos");
var ethers_1 = require("ethers");
var utils_1 = require("ethers/lib/utils");
var cosmos_1 = require("../cosmos");
var ethers_contracts_1 = require("../ethers-contracts");
var nftBridge_1 = require("../solana/nftBridge");
var utils_2 = require("../utils");
var getIsWrappedAsset_1 = require("./getIsWrappedAsset");
/**
 * Returns a origin chain and asset address on {originChain} for a provided Wormhole wrapped address
 * @param nftBridgeAddress
 * @param provider
 * @param wrappedAddress
 * @returns
 */
function getOriginalAssetEth(nftBridgeAddress, provider, wrappedAddress, tokenId, lookupChain) {
    return __awaiter(this, void 0, void 0, function () {
        var isWrapped, token, chainId, assetAddress;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getIsWrappedAsset_1.getIsWrappedAssetEth(nftBridgeAddress, provider, wrappedAddress)];
                case 1:
                    isWrapped = _a.sent();
                    if (!isWrapped) return [3 /*break*/, 4];
                    token = ethers_contracts_1.TokenImplementation__factory.connect(wrappedAddress, provider);
                    return [4 /*yield*/, token.chainId()];
                case 2:
                    chainId = (_a.sent());
                    return [4 /*yield*/, token.nativeContract()];
                case 3:
                    assetAddress = _a.sent();
                    return [2 /*return*/, {
                            isWrapped: true,
                            chainId: chainId,
                            assetAddress: chainId === utils_2.CHAIN_ID_SOLANA
                                ? utils_1.arrayify(ethers_1.BigNumber.from(tokenId))
                                : utils_1.arrayify(assetAddress),
                            tokenId: tokenId,
                        }];
                case 4: return [2 /*return*/, {
                        isWrapped: false,
                        chainId: utils_2.coalesceChainId(lookupChain),
                        assetAddress: utils_1.zeroPad(utils_1.arrayify(wrappedAddress), 32),
                        tokenId: tokenId,
                    }];
            }
        });
    });
}
exports.getOriginalAssetEth = getOriginalAssetEth;
/**
 * Returns a origin chain and asset address on {originChain} for a provided Wormhole wrapped address
 * @param connection
 * @param nftBridgeAddress
 * @param mintAddress
 * @param [commitment]
 * @returns
 */
function getOriginalAssetSolana(connection, nftBridgeAddress, mintAddress, commitment) {
    return __awaiter(this, void 0, void 0, function () {
        var mint_1;
        return __generator(this, function (_a) {
            try {
                mint_1 = new web3_js_1.PublicKey(mintAddress);
                return [2 /*return*/, nftBridge_1.getWrappedMeta(connection, nftBridgeAddress, mintAddress, commitment)
                        .catch(function (_) { return null; })
                        .then(function (meta) {
                        if (meta === null) {
                            return {
                                isWrapped: false,
                                chainId: utils_2.CHAIN_ID_SOLANA,
                                assetAddress: mint_1.toBytes(),
                            };
                        }
                        else {
                            return {
                                isWrapped: true,
                                chainId: meta.chain,
                                assetAddress: Uint8Array.from(meta.tokenAddress),
                                tokenId: meta.tokenId.toString(),
                            };
                        }
                    })];
            }
            catch (_) {
                return [2 /*return*/, {
                        isWrapped: false,
                        chainId: utils_2.CHAIN_ID_SOLANA,
                        assetAddress: new Uint8Array(32),
                    }];
            }
            return [2 /*return*/];
        });
    });
}
exports.getOriginalAssetSolana = getOriginalAssetSolana;
exports.getOriginalAssetSol = getOriginalAssetSolana;
// Derived from https://www.jackieli.dev/posts/bigint-to-uint8array/
var big0 = BigInt(0);
var big1 = BigInt(1);
var big8 = BigInt(8);
function bigToUint8Array(big) {
    if (big < big0) {
        var bits = (BigInt(big.toString(2).length) / big8 + big1) * big8;
        var prefix1 = big1 << bits;
        big += prefix1;
    }
    var hex = big.toString(16);
    if (hex.length % 2) {
        hex = "0" + hex;
    }
    else if (hex[0] === "8") {
        // maximum positive need to prepend 0 otherwise resuts in negative number
        hex = "00" + hex;
    }
    var len = hex.length / 2;
    var u8 = new Uint8Array(len);
    var i = 0;
    var j = 0;
    while (i < len) {
        u8[i] = parseInt(hex.slice(j, j + 2), 16);
        i += 1;
        j += 2;
    }
    return u8;
}
function getOriginalAssetTerra(client, wrappedAddress, lookupChain) {
    return __awaiter(this, void 0, void 0, function () {
        var result, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, client.wasm.contractQuery(wrappedAddress, {
                            wrapped_asset_info: {},
                        })];
                case 1:
                    result = _a.sent();
                    if (result) {
                        return [2 /*return*/, {
                                isWrapped: true,
                                chainId: result.asset_chain,
                                assetAddress: new Uint8Array(Buffer.from(result.asset_address, "base64")),
                            }];
                    }
                    return [3 /*break*/, 3];
                case 2:
                    e_1 = _a.sent();
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/, {
                        isWrapped: false,
                        chainId: utils_2.coalesceChainId(lookupChain),
                        assetAddress: utils_1.zeroPad(cosmos_1.canonicalAddress(wrappedAddress), 32),
                    }];
            }
        });
    });
}
exports.getOriginalAssetTerra = getOriginalAssetTerra;
/**
 * Given a token ID, returns the original asset chain and address. If this is a
 * native asset, the asset address will be the collection hash.
 * @param client
 * @param nftBridgeAddress
 * @param tokenId An object containing creator address, collection name, token
 * name, and property version, which together uniquely identify a token on
 * Aptos. For wrapped assets, property version will be 0.
 * @returns Object containing origin chain and Wormhole compatible 32-byte asset
 * address.
 */
function getOriginalAssetAptos(client, nftBridgeAddress, tokenId) {
    return __awaiter(this, void 0, void 0, function () {
        var originInfo, chainId, e_2, _a, _b;
        var _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, client.getAccountResource(tokenId.token_data_id.creator, nftBridgeAddress + "::state::OriginInfo")];
                case 1:
                    originInfo = (_d.sent()).data;
                    chainId = Number(originInfo.token_chain.number);
                    utils_2.assertChain(chainId);
                    return [2 /*return*/, {
                            isWrapped: true,
                            chainId: chainId,
                            assetAddress: chainId === utils_2.CHAIN_ID_SOLANA
                                ? utils_1.arrayify(ethers_1.BigNumber.from(utils_2.hex(tokenId.token_data_id.name)))
                                : new Uint8Array(utils_2.hex(originInfo.token_address.external_address)),
                            tokenId: utils_2.ensureHexPrefix(utils_2.hex(tokenId.token_data_id.name).toString("hex")),
                        }];
                case 2:
                    e_2 = _d.sent();
                    if (!((e_2 instanceof aptos_1.Types.ApiError || e_2.errorCode === "resource_not_found") &&
                        e_2.status === 404)) {
                        throw e_2;
                    }
                    return [3 /*break*/, 3];
                case 3:
                    _c = {
                        isWrapped: false,
                        chainId: utils_2.CHAIN_ID_APTOS
                    };
                    return [4 /*yield*/, utils_2.deriveCollectionHashFromTokenId(tokenId)];
                case 4:
                    _c.assetAddress = _d.sent();
                    _a = utils_2.ensureHexPrefix;
                    _b = utils_2.uint8ArrayToHex;
                    return [4 /*yield*/, utils_2.deriveTokenHashFromTokenId(tokenId)];
                case 5: return [2 /*return*/, (_c.tokenId = _a.apply(void 0, [_b.apply(void 0, [_d.sent()])]),
                        _c)];
            }
        });
    });
}
exports.getOriginalAssetAptos = getOriginalAssetAptos;
